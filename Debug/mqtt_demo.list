
mqtt_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f6c  08004f6c  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08004f6c  08004f6c  00014f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f74  08004f74  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08004f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b8  2**0
                  CONTENTS
 10 .bss          00000234  200000b8  200000b8  000200b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ec  200002ec  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c2ca  00000000  00000000  0002012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002208  00000000  00000000  0002c3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b58  00000000  00000000  0002e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008b9  00000000  00000000  0002f158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021f9c  00000000  00000000  0002fa11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d200  00000000  00000000  000519ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c9e09  00000000  00000000  0005ebad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000035fc  00000000  00000000  001289b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0012bfb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c70 	.word	0x08004c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08004c70 	.word	0x08004c70

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f002 f815 	bl	80025a0 <HAL_Init>

  /* USER CODE BEGIN Init */
setbuf(stdout,NULL);
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <main+0xdc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	689b      	ldr	r3, [r3, #8]
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fc56 	bl	8003e30 <setbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f87a 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f94a 	bl	8000820 <MX_GPIO_Init>
  MX_SPI1_Init();
 800058c:	f000 f8e0 	bl	8000750 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000590:	f000 f91c 	bl	80007cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("My first tcp client Application");
 8000594:	482d      	ldr	r0, [pc, #180]	; (800064c <main+0xe0>)
 8000596:	f003 fbdd 	bl	8003d54 <iprintf>
  W5500Init();
 800059a:	f001 f9d5 	bl	8001948 <W5500Init>
//  cltnetwork(CN_SET_NETINFO,(void*)&gWIZNETINFO2);
  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 800059e:	492c      	ldr	r1, [pc, #176]	; (8000650 <main+0xe4>)
 80005a0:	2000      	movs	r0, #0
 80005a2:	f001 fbeb 	bl	8001d7c <ctlnetwork>
  PHYStatusCheck();
 80005a6:	f000 f9a5 	bl	80008f4 <PHYStatusCheck>
  PrintPHYConf();
 80005aa:	f000 f9cd 	bl	8000948 <PrintPHYConf>
  /* USER CODE END 2 */
  // so the parameter of the socket function 1st is socket id (1) second one is type of socket if you create sever then local port 1 but
  //we are creating client so it must be 0 another one is socket flag in simple application socket flag 0
  if(socket(1, Sn_MR_TCP, 0, 0)==1)
 80005ae:	2300      	movs	r3, #0
 80005b0:	2200      	movs	r2, #0
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fdab 	bl	8001110 <socket>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d122      	bne.n	8000606 <main+0x9a>
  {
	  printf("\r\nSocket Created Successfully");
 80005c0:	4824      	ldr	r0, [pc, #144]	; (8000654 <main+0xe8>)
 80005c2:	f003 fbc7 	bl	8003d54 <iprintf>
	  printf("\r\nCannot create socket");
	  while(1);
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
printf("\r\nConnecting to server: %d.%d.%d.%d @ TCP Port: %d",destination_ip[0],destination_ip[1],destination_ip[2],destination_ip[3],destination_port);
 80005c6:	4b24      	ldr	r3, [pc, #144]	; (8000658 <main+0xec>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <main+0xec>)
 80005ce:	785b      	ldrb	r3, [r3, #1]
 80005d0:	4618      	mov	r0, r3
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <main+0xec>)
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	461c      	mov	r4, r3
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0xec>)
 80005da:	78db      	ldrb	r3, [r3, #3]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <main+0xf0>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	4623      	mov	r3, r4
 80005e8:	4602      	mov	r2, r0
 80005ea:	481d      	ldr	r0, [pc, #116]	; (8000660 <main+0xf4>)
 80005ec:	f003 fbb2 	bl	8003d54 <iprintf>

 if(connect(1, destination_ip, destination_port)==SOCK_OK)
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <main+0xf0>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4918      	ldr	r1, [pc, #96]	; (8000658 <main+0xec>)
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 ff0b 	bl	8001414 <connect>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d108      	bne.n	8000616 <main+0xaa>
 8000604:	e003      	b.n	800060e <main+0xa2>
	  printf("\r\nCannot create socket");
 8000606:	4817      	ldr	r0, [pc, #92]	; (8000664 <main+0xf8>)
 8000608:	f003 fba4 	bl	8003d54 <iprintf>
	  while(1);
 800060c:	e7fe      	b.n	800060c <main+0xa0>
 {
	  printf("\r\nConnected with server.");
 800060e:	4816      	ldr	r0, [pc, #88]	; (8000668 <main+0xfc>)
 8000610:	f003 fba0 	bl	8003d54 <iprintf>
 8000614:	e003      	b.n	800061e <main+0xb2>
 }
 else
 {
	  //failed
	  printf("\r\nCannot connect with server!");
 8000616:	4815      	ldr	r0, [pc, #84]	; (800066c <main+0x100>)
 8000618:	f003 fb9c 	bl	8003d54 <iprintf>
	  while(1);
 800061c:	e7fe      	b.n	800061c <main+0xb0>
 }

 while (1)
 {
	  //Return value of the send() function is the amount of data sent
	  if(send(1, "JAI SHREE RAM!\r\n", 16)<=SOCK_ERROR)
 800061e:	2210      	movs	r2, #16
 8000620:	4913      	ldr	r1, [pc, #76]	; (8000670 <main+0x104>)
 8000622:	2001      	movs	r0, #1
 8000624:	f000 ffd2 	bl	80015cc <send>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	dc03      	bgt.n	8000636 <main+0xca>
	  {
		  printf("\r\nSending Failed!");
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <main+0x108>)
 8000630:	f003 fb90 	bl	8003d54 <iprintf>
		  while(1);
 8000634:	e7fe      	b.n	8000634 <main+0xc8>

	  }
	  else
	  {
		  printf("\r\nSending Success!");
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <main+0x10c>)
 8000638:	f003 fb8c 	bl	8003d54 <iprintf>
	  }

	  HAL_Delay(1000);
 800063c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000640:	f002 f820 	bl	8002684 <HAL_Delay>
	  if(send(1, "JAI SHREE RAM!\r\n", 16)<=SOCK_ERROR)
 8000644:	e7eb      	b.n	800061e <main+0xb2>
 8000646:	bf00      	nop
 8000648:	200000b4 	.word	0x200000b4
 800064c:	08004c88 	.word	0x08004c88
 8000650:	20000000 	.word	0x20000000
 8000654:	08004ca8 	.word	0x08004ca8
 8000658:	20000018 	.word	0x20000018
 800065c:	2000001c 	.word	0x2000001c
 8000660:	08004ce0 	.word	0x08004ce0
 8000664:	08004cc8 	.word	0x08004cc8
 8000668:	08004d14 	.word	0x08004d14
 800066c:	08004d30 	.word	0x08004d30
 8000670:	08004d50 	.word	0x08004d50
 8000674:	08004d64 	.word	0x08004d64
 8000678:	08004d78 	.word	0x08004d78

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f003 fd5e 	bl	800414c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0320 	add.w	r3, r7, #32
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fa7e 	bl	8002c04 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800070e:	f000 f95f 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000716:	2302      	movs	r3, #2
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2105      	movs	r1, #5
 8000730:	4618      	mov	r0, r3
 8000732:	f002 fcdf 	bl	80030f4 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800073c:	f000 f948 	bl	80009d0 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	; 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_SPI1_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_SPI1_Init+0x74>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_SPI1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_SPI1_Init+0x74>)
 800077c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_SPI1_Init+0x74>)
 800079c:	220a      	movs	r2, #10
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	4808      	ldr	r0, [pc, #32]	; (80007c4 <MX_SPI1_Init+0x74>)
 80007a2:	f002 fec7 	bl	8003534 <HAL_SPI_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 f910 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <MX_SPI1_Init+0x74>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <MX_SPI1_Init+0x74>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007be:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	200000d4 	.word	0x200000d4
 80007c8:	40013000 	.word	0x40013000

080007cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_USART2_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_USART2_UART_Init+0x4c>)
 8000804:	f002 ff1f 	bl	8003646 <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f000 f8df 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000012c 	.word	0x2000012c
 800081c:	40004400 	.word	0x40004400

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b088      	sub	sp, #32
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_GPIO_Init+0x7c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <MX_GPIO_Init+0x7c>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_GPIO_Init+0x7c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_GPIO_Init+0x7c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a10      	ldr	r2, [pc, #64]	; (800089c <MX_GPIO_Init+0x7c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_GPIO_Init+0x7c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2103      	movs	r1, #3
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <MX_GPIO_Init+0x80>)
 8000874:	f002 f9ac 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000878:	2303      	movs	r3, #3
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0x80>)
 8000890:	f002 f802 	bl	8002898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020000 	.word	0x40020000

080008a4 <UWriteData>:

/* USER CODE BEGIN 4 */
// function for usart
void UWriteData(const char data)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 80008ae:	bf00      	nop
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <UWriteData+0x30>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	2b80      	cmp	r3, #128	; 0x80
 80008bc:	d1f8      	bne.n	80008b0 <UWriteData+0xc>

	huart2.Instance->DR=data;
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <UWriteData+0x30>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	605a      	str	r2, [r3, #4]

}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	2000012c 	.word	0x2000012c

080008d8 <__io_putchar>:
int __io_putchar(int ch)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ffdd 	bl	80008a4 <UWriteData>
	return ch;
 80008ea:	687b      	ldr	r3, [r7, #4]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <PHYStatusCheck>:
void PHYStatusCheck(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
	uint8_t tmp;
	printf("checking cable presence...\n");
 80008fa:	480f      	ldr	r0, [pc, #60]	; (8000938 <PHYStatusCheck+0x44>)
 80008fc:	f003 fa90 	bl	8003e20 <puts>

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 8000900:	480e      	ldr	r0, [pc, #56]	; (800093c <PHYStatusCheck+0x48>)
 8000902:	f003 fa27 	bl	8003d54 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	4619      	mov	r1, r3
 800090a:	200f      	movs	r0, #15
 800090c:	f001 f954 	bl	8001bb8 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d106      	bne.n	8000924 <PHYStatusCheck+0x30>
		{
			printf("NO Cable Connected!");
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <PHYStatusCheck+0x4c>)
 8000918:	f003 fa1c 	bl	8003d54 <iprintf>
			HAL_Delay(1500);
 800091c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000920:	f001 feb0 	bl	8002684 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d0ea      	beq.n	8000900 <PHYStatusCheck+0xc>

	printf("Good! Cable got connected!");
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <PHYStatusCheck+0x50>)
 800092c:	f003 fa12 	bl	8003d54 <iprintf>

}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	08004d8c 	.word	0x08004d8c
 800093c:	08004da8 	.word	0x08004da8
 8000940:	08004dd0 	.word	0x08004dd0
 8000944:	08004de4 	.word	0x08004de4

08000948 <PrintPHYConf>:
void PrintPHYConf(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4619      	mov	r1, r3
 8000952:	200b      	movs	r0, #11
 8000954:	f001 f930 	bl	8001bb8 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000958:	793b      	ldrb	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 800095e:	4814      	ldr	r0, [pc, #80]	; (80009b0 <PrintPHYConf+0x68>)
 8000960:	f003 f9f8 	bl	8003d54 <iprintf>
 8000964:	e002      	b.n	800096c <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 8000966:	4813      	ldr	r0, [pc, #76]	; (80009b4 <PrintPHYConf+0x6c>)
 8000968:	f003 f9f4 	bl	8003d54 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d103      	bne.n	800097a <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 8000972:	4811      	ldr	r0, [pc, #68]	; (80009b8 <PrintPHYConf+0x70>)
 8000974:	f003 f9ee 	bl	8003d54 <iprintf>
 8000978:	e002      	b.n	8000980 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 800097a:	4810      	ldr	r0, [pc, #64]	; (80009bc <PrintPHYConf+0x74>)
 800097c:	f003 f9ea 	bl	8003d54 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d103      	bne.n	800098e <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <PrintPHYConf+0x78>)
 8000988:	f003 f9e4 	bl	8003d54 <iprintf>
 800098c:	e002      	b.n	8000994 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <PrintPHYConf+0x7c>)
 8000990:	f003 f9e0 	bl	8003d54 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d103      	bne.n	80009a2 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <PrintPHYConf+0x80>)
 800099c:	f003 f9da 	bl	8003d54 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 80009a0:	e002      	b.n	80009a8 <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <PrintPHYConf+0x84>)
 80009a4:	f003 f9d6 	bl	8003d54 <iprintf>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	08004e00 	.word	0x08004e00
 80009b4:	08004e24 	.word	0x08004e24
 80009b8:	08004e44 	.word	0x08004e44
 80009bc:	08004e60 	.word	0x08004e60
 80009c0:	08004e80 	.word	0x08004e80
 80009c4:	08004e94 	.word	0x08004e94
 80009c8:	08004ea8 	.word	0x08004ea8
 80009cc:	08004eb8 	.word	0x08004eb8

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f001 ff08 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <HAL_SPI_MspInit+0x84>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d12b      	bne.n	8000aa6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_SPI_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	23e0      	movs	r3, #224	; 0xe0
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a96:	2305      	movs	r3, #5
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_SPI_MspInit+0x8c>)
 8000aa2:	f001 fef9 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40013000 	.word	0x40013000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_UART_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12b      	bne.n	8000b36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b16:	230c      	movs	r3, #12
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b26:	2307      	movs	r3, #7
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_UART_MspInit+0x8c>)
 8000b32:	f001 feb1 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40004400 	.word	0x40004400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b98:	f001 fd54 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
  }

  return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e009      	b.n	8000c00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fe6f 	bl	80008d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf1      	blt.n	8000bec <_write+0x12>
  }
  return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_isatty>:

int _isatty(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f003 fa9c 	bl	80041e8 <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	; (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20020000 	.word	0x20020000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	20000174 	.word	0x20000174
 8000ce4:	200002f0 	.word	0x200002f0

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000d14:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <WIZCHIP_READ+0x24>
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d114      	bne.n	8000d5a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d30:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	0c12      	lsrs	r2, r2, #16
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	0a12      	lsrs	r2, r2, #8
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	4610      	mov	r0, r2
 8000d56:	4798      	blx	r3
 8000d58:	e011      	b.n	8000d7e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	0c1b      	lsrs	r3, r3, #16
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f107 020c 	add.w	r2, r7, #12
 8000d78:	2103      	movs	r1, #3
 8000d7a:	4610      	mov	r0, r2
 8000d7c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4798      	blx	r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d8e:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <WIZCHIP_READ+0x94>)
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	4798      	blx	r3
   return ret;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000028 	.word	0x20000028

08000da4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000db6:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d119      	bne.n	8000e00 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	0c12      	lsrs	r2, r2, #16
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	4610      	mov	r0, r2
 8000dd8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	0a12      	lsrs	r2, r2, #8
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	4610      	mov	r0, r2
 8000de6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	4610      	mov	r0, r2
 8000df2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	4798      	blx	r3
 8000dfe:	e013      	b.n	8000e28 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	0a1b      	lsrs	r3, r3, #8
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	2104      	movs	r1, #4
 8000e24:	4610      	mov	r0, r2
 8000e26:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e2e:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <WIZCHIP_WRITE+0x98>)
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	4798      	blx	r3
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000028 	.word	0x20000028

08000e40 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000e4e:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000e54:	4b29      	ldr	r3, [pc, #164]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <WIZCHIP_READ_BUF+0x2a>
 8000e62:	4b26      	ldr	r3, [pc, #152]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d126      	bne.n	8000eb8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000e6a:	4b24      	ldr	r3, [pc, #144]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	0c12      	lsrs	r2, r2, #16
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	4610      	mov	r0, r2
 8000e76:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
 8000e7c:	68fa      	ldr	r2, [r7, #12]
 8000e7e:	0a12      	lsrs	r2, r2, #8
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	4610      	mov	r0, r2
 8000e84:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	82fb      	strh	r3, [r7, #22]
 8000e96:	e00a      	b.n	8000eae <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000e9a:	69db      	ldr	r3, [r3, #28]
 8000e9c:	8afa      	ldrh	r2, [r7, #22]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	188c      	adds	r4, r1, r2
 8000ea2:	4798      	blx	r3
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000ea8:	8afb      	ldrh	r3, [r7, #22]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	82fb      	strh	r3, [r7, #22]
 8000eae:	8afa      	ldrh	r2, [r7, #22]
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3f0      	bcc.n	8000e98 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000eb6:	e017      	b.n	8000ee8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	0a1b      	lsrs	r3, r3, #8
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	f107 0210 	add.w	r2, r7, #16
 8000ed6:	2103      	movs	r1, #3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	68b8      	ldr	r0, [r7, #8]
 8000ee6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000eee:	4b03      	ldr	r3, [pc, #12]	; (8000efc <WIZCHIP_READ_BUF+0xbc>)
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	4798      	blx	r3
}
 8000ef4:	bf00      	nop
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	20000028 	.word	0x20000028

08000f00 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d126      	bne.n	8000f78 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	0c12      	lsrs	r2, r2, #16
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	4610      	mov	r0, r2
 8000f36:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f38:	4b20      	ldr	r3, [pc, #128]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	0a12      	lsrs	r2, r2, #8
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	4610      	mov	r0, r2
 8000f44:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	82fb      	strh	r3, [r7, #22]
 8000f56:	e00a      	b.n	8000f6e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	8afa      	ldrh	r2, [r7, #22]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	440a      	add	r2, r1
 8000f62:	7812      	ldrb	r2, [r2, #0]
 8000f64:	4610      	mov	r0, r2
 8000f66:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000f68:	8afb      	ldrh	r3, [r7, #22]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	82fb      	strh	r3, [r7, #22]
 8000f6e:	8afa      	ldrh	r2, [r7, #22]
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3f0      	bcc.n	8000f58 <WIZCHIP_WRITE_BUF+0x58>
 8000f76:	e017      	b.n	8000fa8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	0a1b      	lsrs	r3, r3, #8
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f92:	f107 0210 	add.w	r2, r7, #16
 8000f96:	2103      	movs	r1, #3
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <WIZCHIP_WRITE_BUF+0xbc>)
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	4798      	blx	r3
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000028 	.word	0x20000028

08000fc0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	81fb      	strh	r3, [r7, #14]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fe94 	bl	8000d0c <WIZCHIP_READ>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000fe8:	89bb      	ldrh	r3, [r7, #12]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b29c      	uxth	r4, r3
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe86 	bl	8000d0c <WIZCHIP_READ>
 8001000:	4603      	mov	r3, r0
 8001002:	b29b      	uxth	r3, r3
 8001004:	4423      	add	r3, r4
 8001006:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001008:	89bb      	ldrh	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d01a      	beq.n	8001044 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	3301      	adds	r3, #1
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fe76 	bl	8000d0c <WIZCHIP_READ>
 8001020:	4603      	mov	r3, r0
 8001022:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	b29c      	uxth	r4, r3
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	3301      	adds	r3, #1
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fe68 	bl	8000d0c <WIZCHIP_READ>
 800103c:	4603      	mov	r3, r0
 800103e:	b29b      	uxth	r3, r3
 8001040:	4423      	add	r3, r4
 8001042:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001044:	89fa      	ldrh	r2, [r7, #14]
 8001046:	89bb      	ldrh	r3, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d1c2      	bne.n	8000fd2 <getSn_TX_FSR+0x12>
   return val;
 800104c:	89fb      	ldrh	r3, [r7, #14]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bd90      	pop	{r4, r7, pc}

08001056 <wiz_send_data>:
   }while (val != val1);
   return val;
}

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001056:	b590      	push	{r4, r7, lr}
 8001058:	b085      	sub	sp, #20
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	6039      	str	r1, [r7, #0]
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	4613      	mov	r3, r2
 8001064:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d048      	beq.n	8001106 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	3301      	adds	r3, #1
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe43 	bl	8000d0c <WIZCHIP_READ>
 8001086:	4603      	mov	r3, r0
 8001088:	b29b      	uxth	r3, r3
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b29c      	uxth	r4, r3
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	3301      	adds	r3, #1
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fe36 	bl	8000d0c <WIZCHIP_READ>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4423      	add	r3, r4
 80010a6:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80010a8:	89fb      	ldrh	r3, [r7, #14]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	3202      	adds	r2, #2
 80010b2:	00d2      	lsls	r2, r2, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	461a      	mov	r2, r3
 80010bc:	6839      	ldr	r1, [r7, #0]
 80010be:	68b8      	ldr	r0, [r7, #8]
 80010c0:	f7ff ff1e 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80010c4:	89fa      	ldrh	r2, [r7, #14]
 80010c6:	88bb      	ldrh	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	3301      	adds	r3, #1
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80010d8:	461a      	mov	r2, r3
 80010da:	89fb      	ldrh	r3, [r7, #14]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	b29b      	uxth	r3, r3
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	4619      	mov	r1, r3
 80010e4:	4610      	mov	r0, r2
 80010e6:	f7ff fe5d 	bl	8000da4 <WIZCHIP_WRITE>
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	3301      	adds	r3, #1
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80010f6:	461a      	mov	r2, r3
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f7ff fe50 	bl	8000da4 <WIZCHIP_WRITE>
 8001104:	e000      	b.n	8001108 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8001106:	bf00      	nop
}
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
	...

08001110 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4604      	mov	r4, r0
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4623      	mov	r3, r4
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	4603      	mov	r3, r0
 8001124:	71bb      	strb	r3, [r7, #6]
 8001126:	460b      	mov	r3, r1
 8001128:	80bb      	strh	r3, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d902      	bls.n	800113a <socket+0x2a>
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	e0f0      	b.n	800131c <socket+0x20c>
	switch(protocol)
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <socket+0x3c>
 8001140:	2b00      	cmp	r3, #0
 8001142:	dd11      	ble.n	8001168 <socket+0x58>
 8001144:	3b02      	subs	r3, #2
 8001146:	2b02      	cmp	r3, #2
 8001148:	d80e      	bhi.n	8001168 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800114a:	e011      	b.n	8001170 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2204      	movs	r2, #4
 8001152:	4619      	mov	r1, r3
 8001154:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001158:	f7ff fe72 	bl	8000e40 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d105      	bne.n	800116e <socket+0x5e>
 8001162:	f06f 0302 	mvn.w	r3, #2
 8001166:	e0d9      	b.n	800131c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001168:	f06f 0304 	mvn.w	r3, #4
 800116c:	e0d6      	b.n	800131c <socket+0x20c>
	    break;
 800116e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <socket+0x70>
 800117a:	f06f 0305 	mvn.w	r3, #5
 800117e:	e0cd      	b.n	800131c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d028      	beq.n	80011d8 <socket+0xc8>
	{
   	switch(protocol)
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d002      	beq.n	8001192 <socket+0x82>
 800118c:	2b02      	cmp	r3, #2
 800118e:	d008      	beq.n	80011a2 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001190:	e022      	b.n	80011d8 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001192:	78fb      	ldrb	r3, [r7, #3]
 8001194:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11a      	bne.n	80011d2 <socket+0xc2>
 800119c:	f06f 0305 	mvn.w	r3, #5
 80011a0:	e0bc      	b.n	800131c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d006      	beq.n	80011ba <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80011ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db02      	blt.n	80011ba <socket+0xaa>
 80011b4:	f06f 0305 	mvn.w	r3, #5
 80011b8:	e0b0      	b.n	800131c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80011c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db04      	blt.n	80011d6 <socket+0xc6>
 80011cc:	f06f 0305 	mvn.w	r3, #5
 80011d0:	e0a4      	b.n	800131c <socket+0x20c>
   	      break;
 80011d2:	bf00      	nop
 80011d4:	e000      	b.n	80011d8 <socket+0xc8>
   	      break;
 80011d6:	bf00      	nop
   	}
   }
	close(sn);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f8ac 	bl	8001338 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	3301      	adds	r3, #1
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ee:	f023 030f 	bic.w	r3, r3, #15
 80011f2:	b25a      	sxtb	r2, r3
 80011f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fdd0 	bl	8000da4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8001204:	88bb      	ldrh	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d110      	bne.n	800122c <socket+0x11c>
	{
	   port = sock_any_port++;
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <socket+0x214>)
 800120c:	881b      	ldrh	r3, [r3, #0]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	b291      	uxth	r1, r2
 8001212:	4a44      	ldr	r2, [pc, #272]	; (8001324 <socket+0x214>)
 8001214:	8011      	strh	r1, [r2, #0]
 8001216:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8001218:	4b42      	ldr	r3, [pc, #264]	; (8001324 <socket+0x214>)
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8001220:	4293      	cmp	r3, r2
 8001222:	d103      	bne.n	800122c <socket+0x11c>
 8001224:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <socket+0x214>)
 8001226:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800122a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	3301      	adds	r3, #1
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001238:	461a      	mov	r2, r3
 800123a:	88bb      	ldrh	r3, [r7, #4]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	b29b      	uxth	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	4610      	mov	r0, r2
 8001246:	f7ff fdad 	bl	8000da4 <WIZCHIP_WRITE>
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	3301      	adds	r3, #1
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001256:	461a      	mov	r2, r3
 8001258:	88bb      	ldrh	r3, [r7, #4]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff fda0 	bl	8000da4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	3301      	adds	r3, #1
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001270:	2101      	movs	r1, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd96 	bl	8000da4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001278:	bf00      	nop
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	3301      	adds	r3, #1
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd40 	bl	8000d0c <WIZCHIP_READ>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f3      	bne.n	800127a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2201      	movs	r2, #1
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	b21b      	sxth	r3, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	b21a      	sxth	r2, r3
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <socket+0x218>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4013      	ands	r3, r2
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <socket+0x218>)
 80012ae:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80012b0:	78fb      	ldrb	r3, [r7, #3]
 80012b2:	f003 0201 	and.w	r2, r3, #1
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	b21a      	sxth	r2, r3
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <socket+0x218>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b17      	ldr	r3, [pc, #92]	; (8001328 <socket+0x218>)
 80012cc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2201      	movs	r2, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	b21a      	sxth	r2, r3
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <socket+0x21c>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4013      	ands	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <socket+0x21c>)
 80012ea:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <socket+0x220>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <socket+0x224>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80012fe:	bf00      	nop
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	3301      	adds	r3, #1
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fcfd 	bl	8000d0c <WIZCHIP_READ>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f3      	beq.n	8001300 <socket+0x1f0>
   return (int8_t)sn;
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	20000024 	.word	0x20000024
 8001328:	20000178 	.word	0x20000178
 800132c:	2000017a 	.word	0x2000017a
 8001330:	2000017c 	.word	0x2000017c
 8001334:	2000018c 	.word	0x2000018c

08001338 <close>:

int8_t close(uint8_t sn)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b08      	cmp	r3, #8
 8001346:	d902      	bls.n	800134e <close+0x16>
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
 800134c:	e055      	b.n	80013fa <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	3301      	adds	r3, #1
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800135a:	2110      	movs	r1, #16
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fd21 	bl	8000da4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001362:	bf00      	nop
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	3301      	adds	r3, #1
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fccb 	bl	8000d0c <WIZCHIP_READ>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f3      	bne.n	8001364 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	3301      	adds	r3, #1
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001388:	211f      	movs	r1, #31
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fd0a 	bl	8000da4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2201      	movs	r2, #1
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	b21b      	sxth	r3, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <close+0xcc>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <close+0xcc>)
 80013ac:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2201      	movs	r2, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b12      	ldr	r3, [pc, #72]	; (8001408 <close+0xd0>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4013      	ands	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <close+0xd0>)
 80013ca:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <close+0xd4>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <close+0xd8>)
 80013da:	2100      	movs	r1, #0
 80013dc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80013de:	bf00      	nop
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	3301      	adds	r3, #1
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fc8d 	bl	8000d0c <WIZCHIP_READ>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f3      	bne.n	80013e0 <close+0xa8>
	return SOCK_OK;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000178 	.word	0x20000178
 8001408:	2000017a 	.word	0x2000017a
 800140c:	2000017c 	.word	0x2000017c
 8001410:	2000018c 	.word	0x2000018c

08001414 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
 8001420:	4613      	mov	r3, r2
 8001422:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	2b08      	cmp	r3, #8
 8001428:	d902      	bls.n	8001430 <connect+0x1c>
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
 800142e:	e0c6      	b.n	80015be <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	3301      	adds	r3, #1
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fc67 	bl	8000d0c <WIZCHIP_READ>
 800143e:	4603      	mov	r3, r0
 8001440:	f003 030f 	and.w	r3, r3, #15
 8001444:	2b01      	cmp	r3, #1
 8001446:	d002      	beq.n	800144e <connect+0x3a>
 8001448:	f06f 0304 	mvn.w	r3, #4
 800144c:	e0b7      	b.n	80015be <connect+0x1aa>
   CHECK_SOCKINIT();
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	3301      	adds	r3, #1
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fc56 	bl	8000d0c <WIZCHIP_READ>
 8001460:	4603      	mov	r3, r0
 8001462:	2b13      	cmp	r3, #19
 8001464:	d002      	beq.n	800146c <connect+0x58>
 8001466:	f06f 0302 	mvn.w	r3, #2
 800146a:	e0a8      	b.n	80015be <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	3201      	adds	r2, #1
 800147a:	7812      	ldrb	r2, [r2, #0]
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	3202      	adds	r2, #2
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	3203      	adds	r2, #3
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	4413      	add	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a2:	d002      	beq.n	80014aa <connect+0x96>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <connect+0x9c>
 80014aa:	f06f 030b 	mvn.w	r3, #11
 80014ae:	e086      	b.n	80015be <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d102      	bne.n	80014bc <connect+0xa8>
 80014b6:	f06f 030a 	mvn.w	r3, #10
 80014ba:	e080      	b.n	80015be <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	3301      	adds	r3, #1
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80014c8:	2204      	movs	r2, #4
 80014ca:	6839      	ldr	r1, [r7, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fd17 	bl	8000f00 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	3301      	adds	r3, #1
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014de:	461a      	mov	r2, r3
 80014e0:	88bb      	ldrh	r3, [r7, #4]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f7ff fc5a 	bl	8000da4 <WIZCHIP_WRITE>
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	3301      	adds	r3, #1
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80014fc:	461a      	mov	r2, r3
 80014fe:	88bb      	ldrh	r3, [r7, #4]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f7ff fc4d 	bl	8000da4 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	3301      	adds	r3, #1
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001516:	2104      	movs	r1, #4
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fc43 	bl	8000da4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800151e:	bf00      	nop
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	3301      	adds	r3, #1
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fbed 	bl	8000d0c <WIZCHIP_READ>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f3      	bne.n	8001520 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <connect+0x1b4>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	fa42 f303 	asr.w	r3, r2, r3
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02b      	beq.n	80015a4 <connect+0x190>
 800154c:	2300      	movs	r3, #0
 800154e:	e036      	b.n	80015be <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	3301      	adds	r3, #1
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fbd5 	bl	8000d0c <WIZCHIP_READ>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	3301      	adds	r3, #1
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001578:	2108      	movs	r1, #8
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fc12 	bl	8000da4 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8001580:	f06f 030c 	mvn.w	r3, #12
 8001584:	e01b      	b.n	80015be <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	3301      	adds	r3, #1
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fbba 	bl	8000d0c <WIZCHIP_READ>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 800159e:	f06f 0303 	mvn.w	r3, #3
 80015a2:	e00c      	b.n	80015be <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	3301      	adds	r3, #1
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fbab 	bl	8000d0c <WIZCHIP_READ>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b17      	cmp	r3, #23
 80015ba:	d1c9      	bne.n	8001550 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80015bc:	2301      	movs	r3, #1
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000178 	.word	0x20000178

080015cc <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	4613      	mov	r3, r2
 80015da:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d902      	bls.n	80015f0 <send+0x24>
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e0de      	b.n	80017ae <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	3301      	adds	r3, #1
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fb87 	bl	8000d0c <WIZCHIP_READ>
 80015fe:	4603      	mov	r3, r0
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	2b01      	cmp	r3, #1
 8001606:	d002      	beq.n	800160e <send+0x42>
 8001608:	f06f 0304 	mvn.w	r3, #4
 800160c:	e0cf      	b.n	80017ae <send+0x1e2>
   CHECK_SOCKDATA();
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <send+0x4e>
 8001614:	f06f 030d 	mvn.w	r3, #13
 8001618:	e0c9      	b.n	80017ae <send+0x1e2>
   tmp = getSn_SR(sn);
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	3301      	adds	r3, #1
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fb70 	bl	8000d0c <WIZCHIP_READ>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	2b17      	cmp	r3, #23
 8001634:	d005      	beq.n	8001642 <send+0x76>
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b1c      	cmp	r3, #28
 800163a:	d002      	beq.n	8001642 <send+0x76>
 800163c:	f06f 0306 	mvn.w	r3, #6
 8001640:	e0b5      	b.n	80017ae <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8001642:	4b5d      	ldr	r3, [pc, #372]	; (80017b8 <send+0x1ec>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	fa42 f303 	asr.w	r3, r2, r3
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d039      	beq.n	80016ca <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	3301      	adds	r3, #1
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb52 	bl	8000d0c <WIZCHIP_READ>
 8001668:	4603      	mov	r3, r0
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d019      	beq.n	80016ae <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	3301      	adds	r3, #1
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001686:	2110      	movs	r1, #16
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fb8b 	bl	8000da4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2201      	movs	r2, #1
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	b21b      	sxth	r3, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	b21a      	sxth	r2, r3
 800169c:	4b46      	ldr	r3, [pc, #280]	; (80017b8 <send+0x1ec>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4013      	ands	r3, r2
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <send+0x1ec>)
 80016aa:	801a      	strh	r2, [r3, #0]
 80016ac:	e00d      	b.n	80016ca <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <send+0xfa>
      {
         close(sn);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff fe3c 	bl	8001338 <close>
         return SOCKERR_TIMEOUT;
 80016c0:	f06f 030c 	mvn.w	r3, #12
 80016c4:	e073      	b.n	80017ae <send+0x1e2>
      }
      else return SOCK_BUSY;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e071      	b.n	80017ae <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	3301      	adds	r3, #1
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fb18 	bl	8000d0c <WIZCHIP_READ>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29b      	uxth	r3, r3
 80016e0:	029b      	lsls	r3, r3, #10
 80016e2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80016e4:	88ba      	ldrh	r2, [r7, #4]
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d901      	bls.n	80016f0 <send+0x124>
 80016ec:	89bb      	ldrh	r3, [r7, #12]
 80016ee:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fc64 	bl	8000fc0 <getSn_TX_FSR>
 80016f8:	4603      	mov	r3, r0
 80016fa:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	3301      	adds	r3, #1
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff faff 	bl	8000d0c <WIZCHIP_READ>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b17      	cmp	r3, #23
 8001716:	d009      	beq.n	800172c <send+0x160>
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b1c      	cmp	r3, #28
 800171c:	d006      	beq.n	800172c <send+0x160>
      {
         close(sn);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe09 	bl	8001338 <close>
         return SOCKERR_SOCKSTATUS;
 8001726:	f06f 0306 	mvn.w	r3, #6
 800172a:	e040      	b.n	80017ae <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <send+0x1f0>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	fa42 f303 	asr.w	r3, r2, r3
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <send+0x180>
 8001740:	88ba      	ldrh	r2, [r7, #4]
 8001742:	89bb      	ldrh	r3, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d901      	bls.n	800174c <send+0x180>
 8001748:	2300      	movs	r3, #0
 800174a:	e030      	b.n	80017ae <send+0x1e2>
      if(len <= freesize) break;
 800174c:	88ba      	ldrh	r2, [r7, #4]
 800174e:	89bb      	ldrh	r3, [r7, #12]
 8001750:	429a      	cmp	r2, r3
 8001752:	d900      	bls.n	8001756 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001754:	e7cc      	b.n	80016f0 <send+0x124>
      if(len <= freesize) break;
 8001756:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001758:	88ba      	ldrh	r2, [r7, #4]
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc79 	bl	8001056 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	3301      	adds	r3, #1
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001770:	2120      	movs	r1, #32
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fb16 	bl	8000da4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001778:	bf00      	nop
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	3301      	adds	r3, #1
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fac0 	bl	8000d0c <WIZCHIP_READ>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f3      	bne.n	800177a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2201      	movs	r2, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	b21a      	sxth	r2, r3
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <send+0x1ec>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <send+0x1ec>)
 80017aa:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80017ac:	88bb      	ldrh	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000017a 	.word	0x2000017a
 80017bc:	20000178 	.word	0x20000178

080017c0 <SPIReadWrite>:
#include "w5500_spi.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 80017ca:	bf00      	nop
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <SPIReadWrite+0x4c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d1f8      	bne.n	80017cc <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <SPIReadWrite+0x4c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	330c      	adds	r3, #12
 80017e0:	79fa      	ldrb	r2, [r7, #7]
 80017e2:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 80017e4:	bf00      	nop
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <SPIReadWrite+0x4c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d1f8      	bne.n	80017e6 <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <SPIReadWrite+0x4c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	330c      	adds	r3, #12
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
}
 80017fe:	4618      	mov	r0, r3
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	200000d4 	.word	0x200000d4

08001810 <wizchip_select>:
void  wizchip_select(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2102      	movs	r1, #2
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <wizchip_select+0x14>)
 800181a:	f001 f9d9 	bl	8002bd0 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020000 	.word	0x40020000

08001828 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2102      	movs	r1, #2
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <wizchip_deselect+0x14>)
 8001832:	f001 f9cd 	bl	8002bd0 <HAL_GPIO_WritePin>
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40020000 	.word	0x40020000

08001840 <wizchip_read>:

uint8_t wizchip_read()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff ffba 	bl	80017c0 <SPIReadWrite>
 800184c:	4603      	mov	r3, r0
 800184e:	71fb      	strb	r3, [r7, #7]
	return rb;
 8001850:	79fb      	ldrb	r3, [r7, #7]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ffaa 	bl	80017c0 <SPIReadWrite>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8001880:	2300      	movs	r3, #0
 8001882:	81fb      	strh	r3, [r7, #14]
 8001884:	e00c      	b.n	80018a0 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff ff9a 	bl	80017c0 <SPIReadWrite>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3301      	adds	r3, #1
 8001898:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 800189a:	89fb      	ldrh	r3, [r7, #14]
 800189c:	3301      	adds	r3, #1
 800189e:	81fb      	strh	r3, [r7, #14]
 80018a0:	89fa      	ldrh	r2, [r7, #14]
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d3ee      	bcc.n	8001886 <wizchip_readburst+0x12>
	}
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 80018be:	2300      	movs	r3, #0
 80018c0:	81fb      	strh	r3, [r7, #14]
 80018c2:	e00a      	b.n	80018da <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff79 	bl	80017c0 <SPIReadWrite>
		pBuf++;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3301      	adds	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	3301      	adds	r3, #1
 80018d8:	81fb      	strh	r3, [r7, #14]
 80018da:	89fa      	ldrh	r2, [r7, #14]
 80018dc:	887b      	ldrh	r3, [r7, #2]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d3f0      	bcc.n	80018c4 <wizchip_writeburst+0x12>
	}
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <W5500IOInit>:
void W5500IOInit()
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <W5500IOInit+0x54>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <W5500IOInit+0x54>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6313      	str	r3, [r2, #48]	; 0x30
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <W5500IOInit+0x54>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800191c:	2303      	movs	r3, #3
 800191e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2302      	movs	r3, #2
 800192a:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4804      	ldr	r0, [pc, #16]	; (8001944 <W5500IOInit+0x58>)
 8001932:	f000 ffb1 	bl	8002898 <HAL_GPIO_Init>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	40020000 	.word	0x40020000

08001948 <W5500Init>:

void W5500Init()
{
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 800194e:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <W5500Init+0x84>)
 8001950:	1d3c      	adds	r4, r7, #4
 8001952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8001958:	f7ff ffc8 	bl	80018ec <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 800195c:	2201      	movs	r2, #1
 800195e:	2102      	movs	r1, #2
 8001960:	481b      	ldr	r0, [pc, #108]	; (80019d0 <W5500Init+0x88>)
 8001962:	f001 f935 	bl	8002bd0 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2101      	movs	r1, #1
 800196a:	4819      	ldr	r0, [pc, #100]	; (80019d0 <W5500Init+0x88>)
 800196c:	f001 f930 	bl	8002bd0 <HAL_GPIO_WritePin>
	tmp = 0xFF;
 8001970:	23ff      	movs	r3, #255	; 0xff
 8001972:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8001974:	bf00      	nop
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	75fa      	strb	r2, [r7, #23]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1fa      	bne.n	8001976 <W5500Init+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	2101      	movs	r1, #1
 8001984:	4812      	ldr	r0, [pc, #72]	; (80019d0 <W5500Init+0x88>)
 8001986:	f001 f923 	bl	8002bd0 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 800198a:	4912      	ldr	r1, [pc, #72]	; (80019d4 <W5500Init+0x8c>)
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <W5500Init+0x90>)
 800198e:	f000 f895 	bl	8001abc <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8001992:	4912      	ldr	r1, [pc, #72]	; (80019dc <W5500Init+0x94>)
 8001994:	4812      	ldr	r0, [pc, #72]	; (80019e0 <W5500Init+0x98>)
 8001996:	f000 f8b7 	bl	8001b08 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 800199a:	4912      	ldr	r1, [pc, #72]	; (80019e4 <W5500Init+0x9c>)
 800199c:	4812      	ldr	r0, [pc, #72]	; (80019e8 <W5500Init+0xa0>)
 800199e:	f000 f8df 	bl	8001b60 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	2001      	movs	r0, #1
 80019a8:	f000 f906 	bl	8001bb8 <ctlwizchip>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b2:	d103      	bne.n	80019bc <W5500Init+0x74>
		printf("WIZCHIP Initialized Failed.\r\n");
 80019b4:	480d      	ldr	r0, [pc, #52]	; (80019ec <W5500Init+0xa4>)
 80019b6:	f002 fa33 	bl	8003e20 <puts>
		while (1);
 80019ba:	e7fe      	b.n	80019ba <W5500Init+0x72>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 80019bc:	480c      	ldr	r0, [pc, #48]	; (80019f0 <W5500Init+0xa8>)
 80019be:	f002 fa2f 	bl	8003e20 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd90      	pop	{r4, r7, pc}
 80019ca:	bf00      	nop
 80019cc:	08004f10 	.word	0x08004f10
 80019d0:	40020000 	.word	0x40020000
 80019d4:	08001829 	.word	0x08001829
 80019d8:	08001811 	.word	0x08001811
 80019dc:	0800185b 	.word	0x0800185b
 80019e0:	08001841 	.word	0x08001841
 80019e4:	080018b3 	.word	0x080018b3
 80019e8:	08001875 	.word	0x08001875
 80019ec:	08004ecc 	.word	0x08004ecc
 80019f0:	08004eec 	.word	0x08004eec

080019f4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	70fb      	strb	r3, [r7, #3]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	701a      	strb	r2, [r3, #0]
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	2300      	movs	r3, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <reg_wizchip_cs_cbfunc+0x16>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <reg_wizchip_cs_cbfunc+0x40>)
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <reg_wizchip_cs_cbfunc+0x44>)
 8001ad6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <reg_wizchip_cs_cbfunc+0x40>)
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <reg_wizchip_cs_cbfunc+0x48>)
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	e006      	b.n	8001aee <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	; (8001afc <reg_wizchip_cs_cbfunc+0x40>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <reg_wizchip_cs_cbfunc+0x40>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6193      	str	r3, [r2, #24]
   }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000028 	.word	0x20000028
 8001b00:	08001a11 	.word	0x08001a11
 8001b04:	08001a1f 	.word	0x08001a1f

08001b08 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001b12:	bf00      	nop
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f9      	beq.n	8001b14 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d002      	beq.n	8001b2c <reg_wizchip_spi_cbfunc+0x24>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d106      	bne.n	8001b3a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <reg_wizchip_spi_cbfunc+0x50>)
 8001b30:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b34:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <reg_wizchip_spi_cbfunc+0x54>)
 8001b36:	621a      	str	r2, [r3, #32]
 8001b38:	e006      	b.n	8001b48 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001b3a:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <reg_wizchip_spi_cbfunc+0x4c>)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6213      	str	r3, [r2, #32]
   }
}
 8001b46:	bf00      	nop
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20000028 	.word	0x20000028
 8001b58:	08001a65 	.word	0x08001a65
 8001b5c:	08001a75 	.word	0x08001a75

08001b60 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001b6a:	bf00      	nop
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f9      	beq.n	8001b6c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <reg_wizchip_spiburst_cbfunc+0x24>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <reg_wizchip_spiburst_cbfunc+0x50>)
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001b8c:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <reg_wizchip_spiburst_cbfunc+0x54>)
 8001b8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001b90:	e006      	b.n	8001ba0 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8001b92:	4a06      	ldr	r2, [pc, #24]	; (8001bac <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <reg_wizchip_spiburst_cbfunc+0x4c>)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8001b9e:	bf00      	nop
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	20000028 	.word	0x20000028
 8001bb0:	08001a8b 	.word	0x08001a8b
 8001bb4:	08001aa3 	.word	0x08001aa3

08001bb8 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001bb8:	b590      	push	{r4, r7, lr}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f200 80c7 	bhi.w	8001d66 <ctlwizchip+0x1ae>
 8001bd8:	a201      	add	r2, pc, #4	; (adr r2, 8001be0 <ctlwizchip+0x28>)
 8001bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bde:	bf00      	nop
 8001be0:	08001c21 	.word	0x08001c21
 8001be4:	08001c27 	.word	0x08001c27
 8001be8:	08001c53 	.word	0x08001c53
 8001bec:	08001c47 	.word	0x08001c47
 8001bf0:	08001c61 	.word	0x08001c61
 8001bf4:	08001c6d 	.word	0x08001c6d
 8001bf8:	08001c7b 	.word	0x08001c7b
 8001bfc:	08001ca1 	.word	0x08001ca1
 8001c00:	08001cc7 	.word	0x08001cc7
 8001c04:	08001d0b 	.word	0x08001d0b
 8001c08:	08001d11 	.word	0x08001d11
 8001c0c:	08001d19 	.word	0x08001d19
 8001c10:	08001d6d 	.word	0x08001d6d
 8001c14:	08001d21 	.word	0x08001d21
 8001c18:	08001d2f 	.word	0x08001d2f
 8001c1c:	08001d4b 	.word	0x08001d4b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001c20:	f000 f8ea 	bl	8001df8 <wizchip_sw_reset>
         break;
 8001c24:	e0a3      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3308      	adds	r3, #8
 8001c34:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f927 	bl	8001e90 <wizchip_init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	e094      	b.n	8001d70 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f9ac 	bl	8001fa8 <wizchip_clrinterrupt>
         break;
 8001c50:	e08d      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8001c52:	f000 f9dd 	bl	8002010 <wizchip_getinterrupt>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	801a      	strh	r2, [r3, #0]
         break;
 8001c5e:	e086      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 f9f8 	bl	800205a <wizchip_setinterruptmask>
         break;         
 8001c6a:	e080      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001c6c:	f000 fa10 	bl	8002090 <wizchip_getinterruptmask>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	801a      	strh	r2, [r3, #0]
         break;
 8001c78:	e079      	b.n	8001d6e <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001c8a:	f7ff f88b 	bl	8000da4 <WIZCHIP_WRITE>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	4619      	mov	r1, r3
 8001c96:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001c9a:	f7ff f883 	bl	8000da4 <WIZCHIP_WRITE>
         break;
 8001c9e:	e066      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8001ca0:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001ca4:	f7ff f832 	bl	8000d0c <WIZCHIP_READ>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	b29c      	uxth	r4, r3
 8001cb0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001cb4:	f7ff f82a 	bl	8000d0c <WIZCHIP_READ>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	4423      	add	r3, r4
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	801a      	strh	r2, [r3, #0]
         break;
 8001cc4:	e053      	b.n	8001d6e <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001cc6:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <ctlwizchip+0x1c0>)
 8001cc8:	789a      	ldrb	r2, [r3, #2]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <ctlwizchip+0x1c0>)
 8001cd4:	78d2      	ldrb	r2, [r2, #3]
 8001cd6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	4a26      	ldr	r2, [pc, #152]	; (8001d78 <ctlwizchip+0x1c0>)
 8001cde:	7912      	ldrb	r2, [r2, #4]
 8001ce0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	4a24      	ldr	r2, [pc, #144]	; (8001d78 <ctlwizchip+0x1c0>)
 8001ce8:	7952      	ldrb	r2, [r2, #5]
 8001cea:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <ctlwizchip+0x1c0>)
 8001cf2:	7992      	ldrb	r2, [r2, #6]
 8001cf4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	3305      	adds	r3, #5
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <ctlwizchip+0x1c0>)
 8001cfc:	79d2      	ldrb	r2, [r2, #7]
 8001cfe:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	3306      	adds	r3, #6
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
         break;
 8001d08:	e031      	b.n	8001d6e <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8001d0a:	f000 fa13 	bl	8002134 <wizphy_reset>
         break;
 8001d0e:	e02e      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f000 fa36 	bl	8002182 <wizphy_setphyconf>
         break;
 8001d16:	e02a      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001d18:	6838      	ldr	r0, [r7, #0]
 8001d1a:	f000 fa75 	bl	8002208 <wizphy_getphyconf>
         break;
 8001d1e:	e026      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fad9 	bl	80022dc <wizphy_setphypmode>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	e020      	b.n	8001d70 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8001d2e:	f000 f9e8 	bl	8002102 <wizphy_getphypmode>
 8001d32:	4603      	mov	r3, r0
 8001d34:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2bff      	cmp	r3, #255	; 0xff
 8001d3a:	d102      	bne.n	8001d42 <ctlwizchip+0x18a>
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	e016      	b.n	8001d70 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7dfa      	ldrb	r2, [r7, #23]
 8001d46:	701a      	strb	r2, [r3, #0]
         break;
 8001d48:	e011      	b.n	8001d6e <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8001d4a:	f000 f9c4 	bl	80020d6 <wizphy_getphylink>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001d52:	7dfb      	ldrb	r3, [r7, #23]
 8001d54:	2bff      	cmp	r3, #255	; 0xff
 8001d56:	d102      	bne.n	8001d5e <ctlwizchip+0x1a6>
 8001d58:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5c:	e008      	b.n	8001d70 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	7dfa      	ldrb	r2, [r7, #23]
 8001d62:	701a      	strb	r2, [r3, #0]
         break;
 8001d64:	e003      	b.n	8001d6e <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e001      	b.n	8001d70 <ctlwizchip+0x1b8>
         break;
 8001d6c:	bf00      	nop
   }
   return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	20000028 	.word	0x20000028

08001d7c <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	6039      	str	r1, [r7, #0]
 8001d86:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	d82c      	bhi.n	8001de8 <ctlnetwork+0x6c>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <ctlnetwork+0x18>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001dad 	.word	0x08001dad
 8001d98:	08001db5 	.word	0x08001db5
 8001d9c:	08001dbd 	.word	0x08001dbd
 8001da0:	08001dcb 	.word	0x08001dcb
 8001da4:	08001dd9 	.word	0x08001dd9
 8001da8:	08001de1 	.word	0x08001de1
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	f000 fadf 	bl	8002370 <wizchip_setnetinfo>
         break;
 8001db2:	e01c      	b.n	8001dee <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f000 fb1b 	bl	80023f0 <wizchip_getnetinfo>
         break;
 8001dba:	e018      	b.n	8001dee <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 fb55 	bl	8002470 <wizchip_setnetmode>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	e012      	b.n	8001df0 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001dca:	f000 fb73 	bl	80024b4 <wizchip_getnetmode>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	701a      	strb	r2, [r3, #0]
         break;
 8001dd6:	e00a      	b.n	8001dee <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001dd8:	6838      	ldr	r0, [r7, #0]
 8001dda:	f000 fb73 	bl	80024c4 <wizchip_settimeout>
         break;
 8001dde:	e006      	b.n	8001dee <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f000 fb90 	bl	8002506 <wizchip_gettimeout>
         break;
 8001de6:	e002      	b.n	8001dee <ctlnetwork+0x72>
      default:
         return -1;
 8001de8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dec:	e000      	b.n	8001df0 <ctlnetwork+0x74>
   }
   return 0;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2206      	movs	r2, #6
 8001e02:	4619      	mov	r1, r3
 8001e04:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001e08:	f7ff f81a 	bl	8000e40 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2204      	movs	r2, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e18:	f7ff f812 	bl	8000e40 <WIZCHIP_READ_BUF>
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2204      	movs	r2, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001e28:	f7ff f80a 	bl	8000e40 <WIZCHIP_READ_BUF>
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2204      	movs	r2, #4
 8001e32:	4619      	mov	r1, r3
 8001e34:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e38:	f7ff f802 	bl	8000e40 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7fe ffb0 	bl	8000da4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7fe ff61 	bl	8000d0c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2206      	movs	r2, #6
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001e54:	f7ff f854 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e64:	f7ff f84c 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001e74:	f7ff f844 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001e84:	f7ff f83c 	bl	8000f00 <WIZCHIP_WRITE_BUF>
}
 8001e88:	bf00      	nop
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001e9e:	f7ff ffab 	bl	8001df8 <wizchip_sw_reset>
   if(txsize)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d03b      	beq.n	8001f20 <wizchip_init+0x90>
   {
      tmp = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e015      	b.n	8001ede <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	7bbb      	ldrb	r3, [r7, #14]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	dd02      	ble.n	8001ed2 <wizchip_init+0x42>
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed0:	e066      	b.n	8001fa0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	73fb      	strb	r3, [r7, #15]
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	2b07      	cmp	r3, #7
 8001ee4:	dde5      	ble.n	8001eb2 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
 8001eea:	e015      	b.n	8001f18 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001efa:	4618      	mov	r0, r3
 8001efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe ff4c 	bl	8000da4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	2b07      	cmp	r3, #7
 8001f1e:	dde5      	ble.n	8001eec <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03b      	beq.n	8001f9e <wizchip_init+0x10e>
   {
      tmp = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e015      	b.n	8001f5c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	7bbb      	ldrb	r3, [r7, #14]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	dd02      	ble.n	8001f50 <wizchip_init+0xc0>
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e027      	b.n	8001fa0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	73fb      	strb	r3, [r7, #15]
 8001f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f60:	2b07      	cmp	r3, #7
 8001f62:	dde5      	ble.n	8001f30 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e015      	b.n	8001f96 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	3301      	adds	r3, #1
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	4413      	add	r3, r2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe ff0d 	bl	8000da4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	73fb      	strb	r3, [r7, #15]
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	2b07      	cmp	r3, #7
 8001f9c:	dde5      	ble.n	8001f6a <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	f023 030f 	bic.w	r3, r3, #15
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001fcc:	f7fe feea 	bl	8000da4 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e014      	b.n	8002000 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001fd6:	7bba      	ldrb	r2, [r7, #14]
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	fa42 f303 	asr.w	r3, r2, r3
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <wizchip_clrinterrupt+0x52>
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	3301      	adds	r3, #1
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ff2:	211f      	movs	r1, #31
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fed5 	bl	8000da4 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b07      	cmp	r3, #7
 8002004:	d9e7      	bls.n	8001fd6 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002022:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002026:	f7fe fe71 	bl	8000d0c <WIZCHIP_READ>
 800202a:	4603      	mov	r3, r0
 800202c:	f023 030f 	bic.w	r3, r3, #15
 8002030:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8002032:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002036:	f7fe fe69 	bl	8000d0c <WIZCHIP_READ>
 800203a:	4603      	mov	r3, r0
 800203c:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800203e:	79bb      	ldrb	r3, [r7, #6]
 8002040:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b29a      	uxth	r2, r3
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4413      	add	r3, r2
 800204e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8002050:	88bb      	ldrh	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	b29b      	uxth	r3, r3
 800206e:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	4619      	mov	r1, r3
 8002074:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002078:	f7fe fe94 	bl	8000da4 <WIZCHIP_WRITE>
   setSIMR(simr);
 800207c:	7bbb      	ldrb	r3, [r7, #14]
 800207e:	4619      	mov	r1, r3
 8002080:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002084:	f7fe fe8e 	bl	8000da4 <WIZCHIP_WRITE>
#endif   
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80020a2:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80020a6:	f7fe fe31 	bl	8000d0c <WIZCHIP_READ>
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 80020ae:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80020b2:	f7fe fe2b 	bl	8000d0c <WIZCHIP_READ>
 80020b6:	4603      	mov	r3, r0
 80020b8:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80020ba:	79bb      	ldrb	r3, [r7, #6]
 80020bc:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80020be:	88bb      	ldrh	r3, [r7, #4]
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4413      	add	r3, r2
 80020ca:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80020cc:	88bb      	ldrh	r3, [r7, #4]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80020dc:	2300      	movs	r3, #0
 80020de:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80020e0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80020e4:	f7fe fe12 	bl	8000d0c <WIZCHIP_READ>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80020f2:	2301      	movs	r3, #1
 80020f4:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 800210c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002110:	f7fe fdfc 	bl	8000d0c <WIZCHIP_READ>
 8002114:	4603      	mov	r3, r0
 8002116:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800211a:	2b30      	cmp	r3, #48	; 0x30
 800211c:	d102      	bne.n	8002124 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 800211e:	2301      	movs	r3, #1
 8002120:	71fb      	strb	r3, [r7, #7]
 8002122:	e001      	b.n	8002128 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8002124:	2300      	movs	r3, #0
 8002126:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 800213a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800213e:	f7fe fde5 	bl	8000d0c <WIZCHIP_READ>
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002156:	f7fe fe25 	bl	8000da4 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800215a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800215e:	f7fe fdd5 	bl	8000d0c <WIZCHIP_READ>
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800216c:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002176:	f7fe fe15 	bl	8000da4 <WIZCHIP_WRITE>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d104      	bne.n	80021a0 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e003      	b.n	80021a8 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021a6:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d104      	bne.n	80021ba <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e019      	b.n	80021ee <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	78db      	ldrb	r3, [r3, #3]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10d      	bne.n	80021de <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	789b      	ldrb	r3, [r3, #2]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d104      	bne.n	80021d4 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	f043 0318 	orr.w	r3, r3, #24
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e00c      	b.n	80021ee <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e007      	b.n	80021ee <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	789b      	ldrb	r3, [r3, #2]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d103      	bne.n	80021ee <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	f043 0310 	orr.w	r3, r3, #16
 80021ec:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80021f6:	f7fe fdd5 	bl	8000da4 <WIZCHIP_WRITE>
   wizphy_reset();
 80021fa:	f7ff ff9b 	bl	8002134 <wizphy_reset>
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8002214:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002218:	f7fe fd78 	bl	8000d0c <WIZCHIP_READ>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	119b      	asrs	r3, r3, #6
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	b2da      	uxtb	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002236:	2b20      	cmp	r3, #32
 8002238:	d001      	beq.n	800223e <wizphy_getphyconf+0x36>
 800223a:	2b38      	cmp	r3, #56	; 0x38
 800223c:	d103      	bne.n	8002246 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	705a      	strb	r2, [r3, #1]
         break;
 8002244:	e003      	b.n	800224e <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	705a      	strb	r2, [r3, #1]
         break;
 800224c:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002254:	3b10      	subs	r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	bf8c      	ite	hi
 800225a:	2201      	movhi	r2, #1
 800225c:	2200      	movls	r2, #0
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	2a00      	cmp	r2, #0
 8002262:	d10f      	bne.n	8002284 <wizphy_getphyconf+0x7c>
 8002264:	4a1b      	ldr	r2, [pc, #108]	; (80022d4 <wizphy_getphyconf+0xcc>)
 8002266:	fa22 f303 	lsr.w	r3, r2, r3
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	709a      	strb	r2, [r3, #2]
         break;
 8002282:	e003      	b.n	800228c <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	709a      	strb	r2, [r3, #2]
         break;
 800228a:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002292:	3b08      	subs	r3, #8
 8002294:	2b18      	cmp	r3, #24
 8002296:	bf8c      	ite	hi
 8002298:	2201      	movhi	r2, #1
 800229a:	2200      	movls	r2, #0
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	2a00      	cmp	r2, #0
 80022a0:	d10f      	bne.n	80022c2 <wizphy_getphyconf+0xba>
 80022a2:	4a0d      	ldr	r2, [pc, #52]	; (80022d8 <wizphy_getphyconf+0xd0>)
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bf14      	ite	ne
 80022b0:	2301      	movne	r3, #1
 80022b2:	2300      	moveq	r3, #0
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	70da      	strb	r2, [r3, #3]
         break;
 80022c0:	e003      	b.n	80022ca <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	70da      	strb	r2, [r3, #3]
         break;
 80022c8:	bf00      	nop
   }
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	00010101 	.word	0x00010101
 80022d8:	01010001 	.word	0x01010001

080022dc <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80022ea:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80022ee:	f7fe fd0d 	bl	8000d0c <WIZCHIP_READ>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <wizphy_setphypmode+0x2a>
 8002300:	f04f 33ff 	mov.w	r3, #4294967295
 8002304:	e030      	b.n	8002368 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800230c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d104      	bne.n	800231e <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e003      	b.n	8002326 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002324:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800232e:	f7fe fd39 	bl	8000da4 <WIZCHIP_WRITE>
   wizphy_reset();
 8002332:	f7ff feff 	bl	8002134 <wizphy_reset>
   tmp = getPHYCFGR();
 8002336:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800233a:	f7fe fce7 	bl	8000d0c <WIZCHIP_READ>
 800233e:	4603      	mov	r3, r0
 8002340:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <wizphy_setphypmode+0x88>
 8002352:	2300      	movs	r3, #0
 8002354:	e008      	b.n	8002368 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <wizphy_setphypmode+0x88>
 8002360:	2300      	movs	r3, #0
 8002362:	e001      	b.n	8002368 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8002364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2206      	movs	r2, #6
 800237c:	4619      	mov	r1, r3
 800237e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002382:	f7fe fdbd 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	330e      	adds	r3, #14
 800238a:	2204      	movs	r2, #4
 800238c:	4619      	mov	r1, r3
 800238e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002392:	f7fe fdb5 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	330a      	adds	r3, #10
 800239a:	2204      	movs	r2, #4
 800239c:	4619      	mov	r1, r3
 800239e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80023a2:	f7fe fdad 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3306      	adds	r3, #6
 80023aa:	2204      	movs	r2, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80023b2:	f7fe fda5 	bl	8000f00 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	7c9a      	ldrb	r2, [r3, #18]
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <wizchip_setnetinfo+0x78>)
 80023bc:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7cda      	ldrb	r2, [r3, #19]
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <wizchip_setnetinfo+0x78>)
 80023c4:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7d1a      	ldrb	r2, [r3, #20]
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <wizchip_setnetinfo+0x78>)
 80023cc:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7d5a      	ldrb	r2, [r3, #21]
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <wizchip_setnetinfo+0x78>)
 80023d4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7d9a      	ldrb	r2, [r3, #22]
 80023da:	4b04      	ldr	r3, [pc, #16]	; (80023ec <wizchip_setnetinfo+0x7c>)
 80023dc:	701a      	strb	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000194 	.word	0x20000194
 80023ec:	20000198 	.word	0x20000198

080023f0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2206      	movs	r2, #6
 80023fc:	4619      	mov	r1, r3
 80023fe:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002402:	f7fe fd1d 	bl	8000e40 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	330e      	adds	r3, #14
 800240a:	2204      	movs	r2, #4
 800240c:	4619      	mov	r1, r3
 800240e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002412:	f7fe fd15 	bl	8000e40 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	330a      	adds	r3, #10
 800241a:	2204      	movs	r2, #4
 800241c:	4619      	mov	r1, r3
 800241e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002422:	f7fe fd0d 	bl	8000e40 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3306      	adds	r3, #6
 800242a:	2204      	movs	r2, #4
 800242c:	4619      	mov	r1, r3
 800242e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002432:	f7fe fd05 	bl	8000e40 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <wizchip_getnetinfo+0x78>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <wizchip_getnetinfo+0x78>)
 8002440:	785a      	ldrb	r2, [r3, #1]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <wizchip_getnetinfo+0x78>)
 8002448:	789a      	ldrb	r2, [r3, #2]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <wizchip_getnetinfo+0x78>)
 8002450:	78da      	ldrb	r2, [r3, #3]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <wizchip_getnetinfo+0x7c>)
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	759a      	strb	r2, [r3, #22]
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000194 	.word	0x20000194
 800246c:	20000198 	.word	0x20000198

08002470 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8002484:	2b00      	cmp	r3, #0
 8002486:	d002      	beq.n	800248e <wizchip_setnetmode+0x1e>
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	e00e      	b.n	80024ac <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fc3c 	bl	8000d0c <WIZCHIP_READ>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4313      	orrs	r3, r2
 800249e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	4619      	mov	r1, r3
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fc7d 	bl	8000da4 <WIZCHIP_WRITE>
   return 0;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe fc27 	bl	8000d0c <WIZCHIP_READ>
 80024be:	4603      	mov	r3, r0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80024d6:	f7fe fc65 	bl	8000da4 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	885b      	ldrh	r3, [r3, #2]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	4619      	mov	r1, r3
 80024e6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80024ea:	f7fe fc5b 	bl	8000da4 <WIZCHIP_WRITE>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	885b      	ldrh	r3, [r3, #2]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	4619      	mov	r1, r3
 80024f6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80024fa:	f7fe fc53 	bl	8000da4 <WIZCHIP_WRITE>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8002506:	b590      	push	{r4, r7, lr}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 800250e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8002512:	f7fe fbfb 	bl	8000d0c <WIZCHIP_READ>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 800251e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8002522:	f7fe fbf3 	bl	8000d0c <WIZCHIP_READ>
 8002526:	4603      	mov	r3, r0
 8002528:	b29b      	uxth	r3, r3
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	b29c      	uxth	r4, r3
 800252e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8002532:	f7fe fbeb 	bl	8000d0c <WIZCHIP_READ>
 8002536:	4603      	mov	r3, r0
 8002538:	b29b      	uxth	r3, r3
 800253a:	4423      	add	r3, r4
 800253c:	b29a      	uxth	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	805a      	strh	r2, [r3, #2]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
	...

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002584 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002550:	f7fe fbca 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002556:	490d      	ldr	r1, [pc, #52]	; (800258c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800255a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256a:	4a0a      	ldr	r2, [pc, #40]	; (8002594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800256c:	4c0a      	ldr	r4, [pc, #40]	; (8002598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800257a:	f001 fe3b 	bl	80041f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7fd fff5 	bl	800056c <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002590:	08004f7c 	.word	0x08004f7c
  ldr r2, =_sbss
 8002594:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002598:	200002ec 	.word	0x200002ec

0800259c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_Init+0x40>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_Init+0x40>)
 80025b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_Init+0x40>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 f931 	bl	8002830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 f808 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d4:	f7fe fa02 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_InitTick+0x54>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_InitTick+0x58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f93b 	bl	800287e <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f000 f911 	bl	8002846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <HAL_InitTick+0x5c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000020 	.word	0x20000020
 800263c:	20000058 	.word	0x20000058
 8002640:	20000054 	.word	0x20000054

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000058 	.word	0x20000058
 8002668:	2000019c 	.word	0x2000019c

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000019c 	.word	0x2000019c

08002684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7ff ffee 	bl	800266c <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d005      	beq.n	80026aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_Delay+0x44>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026aa:	bf00      	nop
 80026ac:	f7ff ffde 	bl	800266c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d8f7      	bhi.n	80026ac <HAL_Delay+0x28>
  {
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000058 	.word	0x20000058

080026cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026dc:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fe:	4a04      	ldr	r2, [pc, #16]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	60d3      	str	r3, [r2, #12]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <__NVIC_GetPriorityGrouping+0x18>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0307 	and.w	r3, r3, #7
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	db0a      	blt.n	800275a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	490c      	ldr	r1, [pc, #48]	; (800277c <__NVIC_SetPriority+0x4c>)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	0112      	lsls	r2, r2, #4
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	440b      	add	r3, r1
 8002754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002758:	e00a      	b.n	8002770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	b2da      	uxtb	r2, r3
 800275e:	4908      	ldr	r1, [pc, #32]	; (8002780 <__NVIC_SetPriority+0x50>)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	3b04      	subs	r3, #4
 8002768:	0112      	lsls	r2, r2, #4
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	440b      	add	r3, r1
 800276e:	761a      	strb	r2, [r3, #24]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b480      	push	{r7}
 8002786:	b089      	sub	sp, #36	; 0x24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f1c3 0307 	rsb	r3, r3, #7
 800279e:	2b04      	cmp	r3, #4
 80027a0:	bf28      	it	cs
 80027a2:	2304      	movcs	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3304      	adds	r3, #4
 80027aa:	2b06      	cmp	r3, #6
 80027ac:	d902      	bls.n	80027b4 <NVIC_EncodePriority+0x30>
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3b03      	subs	r3, #3
 80027b2:	e000      	b.n	80027b6 <NVIC_EncodePriority+0x32>
 80027b4:	2300      	movs	r3, #0
 80027b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	f04f 32ff 	mov.w	r2, #4294967295
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43da      	mvns	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	401a      	ands	r2, r3
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027cc:	f04f 31ff 	mov.w	r1, #4294967295
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa01 f303 	lsl.w	r3, r1, r3
 80027d6:	43d9      	mvns	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027dc:	4313      	orrs	r3, r2
         );
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3724      	adds	r7, #36	; 0x24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027fc:	d301      	bcc.n	8002802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027fe:	2301      	movs	r3, #1
 8002800:	e00f      	b.n	8002822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <SysTick_Config+0x40>)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280a:	210f      	movs	r1, #15
 800280c:	f04f 30ff 	mov.w	r0, #4294967295
 8002810:	f7ff ff8e 	bl	8002730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002814:	4b05      	ldr	r3, [pc, #20]	; (800282c <SysTick_Config+0x40>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281a:	4b04      	ldr	r3, [pc, #16]	; (800282c <SysTick_Config+0x40>)
 800281c:	2207      	movs	r2, #7
 800281e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	e000e010 	.word	0xe000e010

08002830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ff47 	bl	80026cc <__NVIC_SetPriorityGrouping>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002858:	f7ff ff5c 	bl	8002714 <__NVIC_GetPriorityGrouping>
 800285c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	68b9      	ldr	r1, [r7, #8]
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff8e 	bl	8002784 <NVIC_EncodePriority>
 8002868:	4602      	mov	r2, r0
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	4611      	mov	r1, r2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff5d 	bl	8002730 <__NVIC_SetPriority>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffb0 	bl	80027ec <SysTick_Config>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	e16b      	b.n	8002b8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	f040 815a 	bne.w	8002b86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d005      	beq.n	80028ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d130      	bne.n	800294c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68da      	ldr	r2, [r3, #12]
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002920:	2201      	movs	r2, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 0201 	and.w	r2, r3, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4313      	orrs	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	2b03      	cmp	r3, #3
 8002956:	d017      	beq.n	8002988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d123      	bne.n	80029dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	08da      	lsrs	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3208      	adds	r2, #8
 800299c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	220f      	movs	r2, #15
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	69b9      	ldr	r1, [r7, #24]
 80029d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	2203      	movs	r2, #3
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0203 	and.w	r2, r3, #3
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 80b4 	beq.w	8002b86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	4b60      	ldr	r3, [pc, #384]	; (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a5f      	ldr	r2, [pc, #380]	; (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ba4 <HAL_GPIO_Init+0x30c>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3a:	4a5b      	ldr	r2, [pc, #364]	; (8002ba8 <HAL_GPIO_Init+0x310>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_GPIO_Init+0x314>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d02b      	beq.n	8002abe <HAL_GPIO_Init+0x226>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a51      	ldr	r2, [pc, #324]	; (8002bb0 <HAL_GPIO_Init+0x318>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d025      	beq.n	8002aba <HAL_GPIO_Init+0x222>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a50      	ldr	r2, [pc, #320]	; (8002bb4 <HAL_GPIO_Init+0x31c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01f      	beq.n	8002ab6 <HAL_GPIO_Init+0x21e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4f      	ldr	r2, [pc, #316]	; (8002bb8 <HAL_GPIO_Init+0x320>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d019      	beq.n	8002ab2 <HAL_GPIO_Init+0x21a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_Init+0x216>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	; (8002bc0 <HAL_GPIO_Init+0x328>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <HAL_GPIO_Init+0x212>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	; (8002bc4 <HAL_GPIO_Init+0x32c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0x20e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	; (8002bc8 <HAL_GPIO_Init+0x330>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_GPIO_Init+0x20a>
 8002a9e:	2307      	movs	r3, #7
 8002aa0:	e00e      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aa2:	2308      	movs	r3, #8
 8002aa4:	e00c      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e00a      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aaa:	2305      	movs	r3, #5
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x228>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad0:	4935      	ldr	r1, [pc, #212]	; (8002ba8 <HAL_GPIO_Init+0x310>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b08:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b56:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b80:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f ae90 	bls.w	80028b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021400 	.word	0x40021400
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40021c00 	.word	0x40021c00
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e267      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d075      	beq.n	8002d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c22:	4b88      	ldr	r3, [pc, #544]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d00c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2e:	4b85      	ldr	r3, [pc, #532]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d112      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c3a:	4b82      	ldr	r3, [pc, #520]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c46:	d10b      	bne.n	8002c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	4b7e      	ldr	r3, [pc, #504]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d05b      	beq.n	8002d0c <HAL_RCC_OscConfig+0x108>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d157      	bne.n	8002d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e242      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c68:	d106      	bne.n	8002c78 <HAL_RCC_OscConfig+0x74>
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e01d      	b.n	8002cb4 <HAL_RCC_OscConfig+0xb0>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d10c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x98>
 8002c82:	4b70      	ldr	r3, [pc, #448]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6f      	ldr	r2, [pc, #444]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	4b6d      	ldr	r3, [pc, #436]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a6c      	ldr	r2, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	e00b      	b.n	8002cb4 <HAL_RCC_OscConfig+0xb0>
 8002c9c:	4b69      	ldr	r3, [pc, #420]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a68      	ldr	r2, [pc, #416]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b66      	ldr	r3, [pc, #408]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d013      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fcd6 	bl	800266c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff fcd2 	bl	800266c <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e207      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd6:	4b5b      	ldr	r3, [pc, #364]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0xc0>
 8002ce2:	e014      	b.n	8002d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7ff fcc2 	bl	800266c <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7ff fcbe 	bl	800266c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1f3      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0xe8>
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d063      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d26:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d11c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d32:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d116      	bne.n	8002d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <HAL_RCC_OscConfig+0x152>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d001      	beq.n	8002d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e1c7      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d56:	4b3b      	ldr	r3, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	4937      	ldr	r1, [pc, #220]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d6a:	e03a      	b.n	8002de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d020      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d74:	4b34      	ldr	r3, [pc, #208]	; (8002e48 <HAL_RCC_OscConfig+0x244>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7ff fc77 	bl	800266c <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d82:	f7ff fc73 	bl	800266c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1a8      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4925      	ldr	r1, [pc, #148]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]
 8002db4:	e015      	b.n	8002de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <HAL_RCC_OscConfig+0x244>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fc56 	bl	800266c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc4:	f7ff fc52 	bl	800266c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e187      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d036      	beq.n	8002e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_RCC_OscConfig+0x248>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfc:	f7ff fc36 	bl	800266c <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e04:	f7ff fc32 	bl	800266c <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e167      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x240>)
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x200>
 8002e22:	e01b      	b.n	8002e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <HAL_RCC_OscConfig+0x248>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7ff fc1f 	bl	800266c <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	e00e      	b.n	8002e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e32:	f7ff fc1b 	bl	800266c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d907      	bls.n	8002e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e150      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	42470000 	.word	0x42470000
 8002e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ea      	bne.n	8002e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8097 	beq.w	8002f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6e:	4b81      	ldr	r3, [pc, #516]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10f      	bne.n	8002e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	4b7d      	ldr	r3, [pc, #500]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a7c      	ldr	r2, [pc, #496]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b7a      	ldr	r3, [pc, #488]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e96:	2301      	movs	r3, #1
 8002e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9a:	4b77      	ldr	r3, [pc, #476]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d118      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea6:	4b74      	ldr	r3, [pc, #464]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a73      	ldr	r2, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb2:	f7ff fbdb 	bl	800266c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7ff fbd7 	bl	800266c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e10c      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x474>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x2ea>
 8002ee0:	4b64      	ldr	r3, [pc, #400]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a63      	ldr	r2, [pc, #396]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	e01c      	b.n	8002f28 <HAL_RCC_OscConfig+0x324>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x30c>
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	4a5e      	ldr	r2, [pc, #376]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	6713      	str	r3, [r2, #112]	; 0x70
 8002f02:	4b5c      	ldr	r3, [pc, #368]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	4a5b      	ldr	r2, [pc, #364]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0e:	e00b      	b.n	8002f28 <HAL_RCC_OscConfig+0x324>
 8002f10:	4b58      	ldr	r3, [pc, #352]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1c:	4b55      	ldr	r3, [pc, #340]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a54      	ldr	r2, [pc, #336]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f023 0304 	bic.w	r3, r3, #4
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7ff fb9c 	bl	800266c <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7ff fb98 	bl	800266c <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e0cb      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0ee      	beq.n	8002f38 <HAL_RCC_OscConfig+0x334>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7ff fb86 	bl	800266c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7ff fb82 	bl	800266c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e0b5      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7a:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ee      	bne.n	8002f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f86:	7dfb      	ldrb	r3, [r7, #23]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b39      	ldr	r3, [pc, #228]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4a38      	ldr	r2, [pc, #224]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 80a1 	beq.w	80030e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fa2:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d05c      	beq.n	8003068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d141      	bne.n	800303a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCC_OscConfig+0x478>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7ff fb56 	bl	800266c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7ff fb52 	bl	800266c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e087      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b27      	ldr	r3, [pc, #156]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	491b      	ldr	r1, [pc, #108]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_RCC_OscConfig+0x478>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7ff fb2b 	bl	800266c <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7ff fb27 	bl	800266c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e05c      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x416>
 8003038:	e054      	b.n	80030e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_RCC_OscConfig+0x478>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7ff fb14 	bl	800266c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7ff fb10 	bl	800266c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e045      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b06      	ldr	r3, [pc, #24]	; (8003074 <HAL_RCC_OscConfig+0x470>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x444>
 8003066:	e03d      	b.n	80030e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d107      	bne.n	8003080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e038      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
 8003074:	40023800 	.word	0x40023800
 8003078:	40007000 	.word	0x40007000
 800307c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x4ec>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d028      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d121      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11a      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d111      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0cc      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003108:	4b68      	ldr	r3, [pc, #416]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d90c      	bls.n	8003130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b63      	ldr	r3, [pc, #396]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b8      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003148:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4a58      	ldr	r2, [pc, #352]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003160:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800316a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b50      	ldr	r3, [pc, #320]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	494d      	ldr	r1, [pc, #308]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800317a:	4313      	orrs	r3, r2
 800317c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d044      	beq.n	8003214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d119      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d003      	beq.n	80031b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d107      	bne.n	80031c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b2:	4b3f      	ldr	r3, [pc, #252]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c2:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e067      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d2:	4b37      	ldr	r3, [pc, #220]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4934      	ldr	r1, [pc, #208]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e4:	f7ff fa42 	bl	800266c <HAL_GetTick>
 80031e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ec:	f7ff fa3e 	bl	800266c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e04f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003202:	4b2b      	ldr	r3, [pc, #172]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 020c 	and.w	r2, r3, #12
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	429a      	cmp	r2, r3
 8003212:	d1eb      	bne.n	80031ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b25      	ldr	r3, [pc, #148]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d20c      	bcs.n	800323c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b22      	ldr	r3, [pc, #136]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e032      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4916      	ldr	r1, [pc, #88]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	490e      	ldr	r1, [pc, #56]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800327a:	f000 f821 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 800327e:	4602      	mov	r2, r0
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	490a      	ldr	r1, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	4a09      	ldr	r2, [pc, #36]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f9a2 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023c00 	.word	0x40023c00
 80032b0:	40023800 	.word	0x40023800
 80032b4:	08004f20 	.word	0x08004f20
 80032b8:	20000020 	.word	0x20000020
 80032bc:	20000054 	.word	0x20000054

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c4:	b094      	sub	sp, #80	; 0x50
 80032c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	647b      	str	r3, [r7, #68]	; 0x44
 80032cc:	2300      	movs	r3, #0
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032d0:	2300      	movs	r3, #0
 80032d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d8:	4b79      	ldr	r3, [pc, #484]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 030c 	and.w	r3, r3, #12
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d00d      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x40>
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	f200 80e1 	bhi.w	80034ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d003      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x3a>
 80032f2:	e0db      	b.n	80034ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b73      	ldr	r3, [pc, #460]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80032f8:	e0db      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032fa:	4b73      	ldr	r3, [pc, #460]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80032fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032fe:	e0d8      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003300:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003308:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800330a:	4b6d      	ldr	r3, [pc, #436]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d063      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b6a      	ldr	r3, [pc, #424]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	2200      	movs	r2, #0
 800331e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
 800332a:	2300      	movs	r3, #0
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
 800332e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003332:	4622      	mov	r2, r4
 8003334:	462b      	mov	r3, r5
 8003336:	f04f 0000 	mov.w	r0, #0
 800333a:	f04f 0100 	mov.w	r1, #0
 800333e:	0159      	lsls	r1, r3, #5
 8003340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003344:	0150      	lsls	r0, r2, #5
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4621      	mov	r1, r4
 800334c:	1a51      	subs	r1, r2, r1
 800334e:	6139      	str	r1, [r7, #16]
 8003350:	4629      	mov	r1, r5
 8003352:	eb63 0301 	sbc.w	r3, r3, r1
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003364:	4659      	mov	r1, fp
 8003366:	018b      	lsls	r3, r1, #6
 8003368:	4651      	mov	r1, sl
 800336a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800336e:	4651      	mov	r1, sl
 8003370:	018a      	lsls	r2, r1, #6
 8003372:	4651      	mov	r1, sl
 8003374:	ebb2 0801 	subs.w	r8, r2, r1
 8003378:	4659      	mov	r1, fp
 800337a:	eb63 0901 	sbc.w	r9, r3, r1
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800338a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800338e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003392:	4690      	mov	r8, r2
 8003394:	4699      	mov	r9, r3
 8003396:	4623      	mov	r3, r4
 8003398:	eb18 0303 	adds.w	r3, r8, r3
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	462b      	mov	r3, r5
 80033a0:	eb49 0303 	adc.w	r3, r9, r3
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033b2:	4629      	mov	r1, r5
 80033b4:	024b      	lsls	r3, r1, #9
 80033b6:	4621      	mov	r1, r4
 80033b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033bc:	4621      	mov	r1, r4
 80033be:	024a      	lsls	r2, r1, #9
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033d0:	f7fc ff4e 	bl	8000270 <__aeabi_uldivmod>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033dc:	e058      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	099b      	lsrs	r3, r3, #6
 80033e4:	2200      	movs	r2, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	4611      	mov	r1, r2
 80033ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
 80033f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f8:	4642      	mov	r2, r8
 80033fa:	464b      	mov	r3, r9
 80033fc:	f04f 0000 	mov.w	r0, #0
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	0159      	lsls	r1, r3, #5
 8003406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800340a:	0150      	lsls	r0, r2, #5
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4641      	mov	r1, r8
 8003412:	ebb2 0a01 	subs.w	sl, r2, r1
 8003416:	4649      	mov	r1, r9
 8003418:	eb63 0b01 	sbc.w	fp, r3, r1
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800342c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003430:	ebb2 040a 	subs.w	r4, r2, sl
 8003434:	eb63 050b 	sbc.w	r5, r3, fp
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	00eb      	lsls	r3, r5, #3
 8003442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003446:	00e2      	lsls	r2, r4, #3
 8003448:	4614      	mov	r4, r2
 800344a:	461d      	mov	r5, r3
 800344c:	4643      	mov	r3, r8
 800344e:	18e3      	adds	r3, r4, r3
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	464b      	mov	r3, r9
 8003454:	eb45 0303 	adc.w	r3, r5, r3
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003466:	4629      	mov	r1, r5
 8003468:	028b      	lsls	r3, r1, #10
 800346a:	4621      	mov	r1, r4
 800346c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003470:	4621      	mov	r1, r4
 8003472:	028a      	lsls	r2, r1, #10
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347a:	2200      	movs	r2, #0
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	61fa      	str	r2, [r7, #28]
 8003480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003484:	f7fc fef4 	bl	8000270 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4613      	mov	r3, r2
 800348e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	0c1b      	lsrs	r3, r3, #16
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	3301      	adds	r3, #1
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80034a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034aa:	e002      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3750      	adds	r7, #80	; 0x50
 80034b8:	46bd      	mov	sp, r7
 80034ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	007a1200 	.word	0x007a1200

080034cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20000020 	.word	0x20000020

080034e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034e8:	f7ff fff0 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0a9b      	lsrs	r3, r3, #10
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4903      	ldr	r1, [pc, #12]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40023800 	.word	0x40023800
 8003508:	08004f30 	.word	0x08004f30

0800350c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003510:	f7ff ffdc 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	0b5b      	lsrs	r3, r3, #13
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	4903      	ldr	r1, [pc, #12]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40023800 	.word	0x40023800
 8003530:	08004f30 	.word	0x08004f30

08003534 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e07b      	b.n	800363e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d108      	bne.n	8003560 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003556:	d009      	beq.n	800356c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
 800355e:	e005      	b.n	800356c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd fa50 	bl	8000a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035dc:	431a      	orrs	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f0:	ea42 0103 	orr.w	r1, r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 0104 	and.w	r1, r3, #4
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	f003 0210 	and.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e042      	b.n	80036de <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7fd fa25 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2224      	movs	r2, #36	; 0x24
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003688:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f82c 	bl	80036e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800369e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ec:	b0c0      	sub	sp, #256	; 0x100
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003704:	68d9      	ldr	r1, [r3, #12]
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	ea40 0301 	orr.w	r3, r0, r1
 8003710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	431a      	orrs	r2, r3
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	431a      	orrs	r2, r3
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003740:	f021 010c 	bic.w	r1, r1, #12
 8003744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800374e:	430b      	orrs	r3, r1
 8003750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003762:	6999      	ldr	r1, [r3, #24]
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	ea40 0301 	orr.w	r3, r0, r1
 800376e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b8f      	ldr	r3, [pc, #572]	; (80039b4 <UART_SetConfig+0x2cc>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d005      	beq.n	8003788 <UART_SetConfig+0xa0>
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b8d      	ldr	r3, [pc, #564]	; (80039b8 <UART_SetConfig+0x2d0>)
 8003784:	429a      	cmp	r2, r3
 8003786:	d104      	bne.n	8003792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003788:	f7ff fec0 	bl	800350c <HAL_RCC_GetPCLK2Freq>
 800378c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003790:	e003      	b.n	800379a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003792:	f7ff fea7 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 8003796:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800379a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a4:	f040 810c 	bne.w	80039c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ba:	4622      	mov	r2, r4
 80037bc:	462b      	mov	r3, r5
 80037be:	1891      	adds	r1, r2, r2
 80037c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80037c2:	415b      	adcs	r3, r3
 80037c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037ca:	4621      	mov	r1, r4
 80037cc:	eb12 0801 	adds.w	r8, r2, r1
 80037d0:	4629      	mov	r1, r5
 80037d2:	eb43 0901 	adc.w	r9, r3, r1
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037ea:	4690      	mov	r8, r2
 80037ec:	4699      	mov	r9, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	eb18 0303 	adds.w	r3, r8, r3
 80037f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037f8:	462b      	mov	r3, r5
 80037fa:	eb49 0303 	adc.w	r3, r9, r3
 80037fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800380e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003816:	460b      	mov	r3, r1
 8003818:	18db      	adds	r3, r3, r3
 800381a:	653b      	str	r3, [r7, #80]	; 0x50
 800381c:	4613      	mov	r3, r2
 800381e:	eb42 0303 	adc.w	r3, r2, r3
 8003822:	657b      	str	r3, [r7, #84]	; 0x54
 8003824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800382c:	f7fc fd20 	bl	8000270 <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4b61      	ldr	r3, [pc, #388]	; (80039bc <UART_SetConfig+0x2d4>)
 8003836:	fba3 2302 	umull	r2, r3, r3, r2
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	011c      	lsls	r4, r3, #4
 800383e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003842:	2200      	movs	r2, #0
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003848:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800384c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	64b9      	str	r1, [r7, #72]	; 0x48
 8003858:	415b      	adcs	r3, r3
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003860:	4641      	mov	r1, r8
 8003862:	eb12 0a01 	adds.w	sl, r2, r1
 8003866:	4649      	mov	r1, r9
 8003868:	eb43 0b01 	adc.w	fp, r3, r1
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800387c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003880:	4692      	mov	sl, r2
 8003882:	469b      	mov	fp, r3
 8003884:	4643      	mov	r3, r8
 8003886:	eb1a 0303 	adds.w	r3, sl, r3
 800388a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800388e:	464b      	mov	r3, r9
 8003890:	eb4b 0303 	adc.w	r3, fp, r3
 8003894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80038a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038ac:	460b      	mov	r3, r1
 80038ae:	18db      	adds	r3, r3, r3
 80038b0:	643b      	str	r3, [r7, #64]	; 0x40
 80038b2:	4613      	mov	r3, r2
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	647b      	str	r3, [r7, #68]	; 0x44
 80038ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038c2:	f7fc fcd5 	bl	8000270 <__aeabi_uldivmod>
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	4611      	mov	r1, r2
 80038cc:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <UART_SetConfig+0x2d4>)
 80038ce:	fba3 2301 	umull	r2, r3, r3, r1
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2264      	movs	r2, #100	; 0x64
 80038d6:	fb02 f303 	mul.w	r3, r2, r3
 80038da:	1acb      	subs	r3, r1, r3
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038e2:	4b36      	ldr	r3, [pc, #216]	; (80039bc <UART_SetConfig+0x2d4>)
 80038e4:	fba3 2302 	umull	r2, r3, r3, r2
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038f0:	441c      	add	r4, r3
 80038f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	1891      	adds	r1, r2, r2
 800390a:	63b9      	str	r1, [r7, #56]	; 0x38
 800390c:	415b      	adcs	r3, r3
 800390e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003914:	4641      	mov	r1, r8
 8003916:	1851      	adds	r1, r2, r1
 8003918:	6339      	str	r1, [r7, #48]	; 0x30
 800391a:	4649      	mov	r1, r9
 800391c:	414b      	adcs	r3, r1
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800392c:	4659      	mov	r1, fp
 800392e:	00cb      	lsls	r3, r1, #3
 8003930:	4651      	mov	r1, sl
 8003932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003936:	4651      	mov	r1, sl
 8003938:	00ca      	lsls	r2, r1, #3
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	4603      	mov	r3, r0
 8003940:	4642      	mov	r2, r8
 8003942:	189b      	adds	r3, r3, r2
 8003944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003948:	464b      	mov	r3, r9
 800394a:	460a      	mov	r2, r1
 800394c:	eb42 0303 	adc.w	r3, r2, r3
 8003950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003960:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003968:	460b      	mov	r3, r1
 800396a:	18db      	adds	r3, r3, r3
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
 800396e:	4613      	mov	r3, r2
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800397a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800397e:	f7fc fc77 	bl	8000270 <__aeabi_uldivmod>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <UART_SetConfig+0x2d4>)
 8003988:	fba3 1302 	umull	r1, r3, r3, r2
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	2164      	movs	r1, #100	; 0x64
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	3332      	adds	r3, #50	; 0x32
 800399a:	4a08      	ldr	r2, [pc, #32]	; (80039bc <UART_SetConfig+0x2d4>)
 800399c:	fba2 2303 	umull	r2, r3, r2, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	f003 0207 	and.w	r2, r3, #7
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4422      	add	r2, r4
 80039ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039b0:	e106      	b.n	8003bc0 <UART_SetConfig+0x4d8>
 80039b2:	bf00      	nop
 80039b4:	40011000 	.word	0x40011000
 80039b8:	40011400 	.word	0x40011400
 80039bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039d2:	4642      	mov	r2, r8
 80039d4:	464b      	mov	r3, r9
 80039d6:	1891      	adds	r1, r2, r2
 80039d8:	6239      	str	r1, [r7, #32]
 80039da:	415b      	adcs	r3, r3
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
 80039de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039e2:	4641      	mov	r1, r8
 80039e4:	1854      	adds	r4, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb43 0501 	adc.w	r5, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	00eb      	lsls	r3, r5, #3
 80039f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039fa:	00e2      	lsls	r2, r4, #3
 80039fc:	4614      	mov	r4, r2
 80039fe:	461d      	mov	r5, r3
 8003a00:	4643      	mov	r3, r8
 8003a02:	18e3      	adds	r3, r4, r3
 8003a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a08:	464b      	mov	r3, r9
 8003a0a:	eb45 0303 	adc.w	r3, r5, r3
 8003a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a2e:	4629      	mov	r1, r5
 8003a30:	008b      	lsls	r3, r1, #2
 8003a32:	4621      	mov	r1, r4
 8003a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a38:	4621      	mov	r1, r4
 8003a3a:	008a      	lsls	r2, r1, #2
 8003a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a40:	f7fc fc16 	bl	8000270 <__aeabi_uldivmod>
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	4b60      	ldr	r3, [pc, #384]	; (8003bcc <UART_SetConfig+0x4e4>)
 8003a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	011c      	lsls	r4, r3, #4
 8003a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	1891      	adds	r1, r2, r2
 8003a6a:	61b9      	str	r1, [r7, #24]
 8003a6c:	415b      	adcs	r3, r3
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a74:	4641      	mov	r1, r8
 8003a76:	1851      	adds	r1, r2, r1
 8003a78:	6139      	str	r1, [r7, #16]
 8003a7a:	4649      	mov	r1, r9
 8003a7c:	414b      	adcs	r3, r1
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	00cb      	lsls	r3, r1, #3
 8003a90:	4651      	mov	r1, sl
 8003a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a96:	4651      	mov	r1, sl
 8003a98:	00ca      	lsls	r2, r1, #3
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	460a      	mov	r2, r1
 8003aac:	eb42 0303 	adc.w	r3, r2, r3
 8003ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8003abe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003acc:	4649      	mov	r1, r9
 8003ace:	008b      	lsls	r3, r1, #2
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	008a      	lsls	r2, r1, #2
 8003ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ade:	f7fc fbc7 	bl	8000270 <__aeabi_uldivmod>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4b38      	ldr	r3, [pc, #224]	; (8003bcc <UART_SetConfig+0x4e4>)
 8003aea:	fba3 2301 	umull	r2, r3, r3, r1
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	2264      	movs	r2, #100	; 0x64
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	1acb      	subs	r3, r1, r3
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	3332      	adds	r3, #50	; 0x32
 8003afc:	4a33      	ldr	r2, [pc, #204]	; (8003bcc <UART_SetConfig+0x4e4>)
 8003afe:	fba2 2303 	umull	r2, r3, r2, r3
 8003b02:	095b      	lsrs	r3, r3, #5
 8003b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b08:	441c      	add	r4, r3
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b0e:	2200      	movs	r2, #0
 8003b10:	673b      	str	r3, [r7, #112]	; 0x70
 8003b12:	677a      	str	r2, [r7, #116]	; 0x74
 8003b14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b18:	4642      	mov	r2, r8
 8003b1a:	464b      	mov	r3, r9
 8003b1c:	1891      	adds	r1, r2, r2
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	415b      	adcs	r3, r3
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b28:	4641      	mov	r1, r8
 8003b2a:	1851      	adds	r1, r2, r1
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	4649      	mov	r1, r9
 8003b30:	414b      	adcs	r3, r1
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b40:	4659      	mov	r1, fp
 8003b42:	00cb      	lsls	r3, r1, #3
 8003b44:	4651      	mov	r1, sl
 8003b46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4a:	4651      	mov	r1, sl
 8003b4c:	00ca      	lsls	r2, r1, #3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	4642      	mov	r2, r8
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	460a      	mov	r2, r1
 8003b5e:	eb42 0303 	adc.w	r3, r2, r3
 8003b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b6e:	667a      	str	r2, [r7, #100]	; 0x64
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	008b      	lsls	r3, r1, #2
 8003b80:	4641      	mov	r1, r8
 8003b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b86:	4641      	mov	r1, r8
 8003b88:	008a      	lsls	r2, r1, #2
 8003b8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b8e:	f7fc fb6f 	bl	8000270 <__aeabi_uldivmod>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <UART_SetConfig+0x4e4>)
 8003b98:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2164      	movs	r1, #100	; 0x64
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a08      	ldr	r2, [pc, #32]	; (8003bcc <UART_SetConfig+0x4e4>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 020f 	and.w	r2, r3, #15
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4422      	add	r2, r4
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bcc:	51eb851f 	.word	0x51eb851f

08003bd0 <std>:
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8003bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bde:	6083      	str	r3, [r0, #8]
 8003be0:	8181      	strh	r1, [r0, #12]
 8003be2:	6643      	str	r3, [r0, #100]	; 0x64
 8003be4:	81c2      	strh	r2, [r0, #14]
 8003be6:	6183      	str	r3, [r0, #24]
 8003be8:	4619      	mov	r1, r3
 8003bea:	2208      	movs	r2, #8
 8003bec:	305c      	adds	r0, #92	; 0x5c
 8003bee:	f000 faad 	bl	800414c <memset>
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <std+0x58>)
 8003bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <std+0x5c>)
 8003bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <std+0x60>)
 8003bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <std+0x64>)
 8003c00:	6323      	str	r3, [r4, #48]	; 0x30
 8003c02:	4b0d      	ldr	r3, [pc, #52]	; (8003c38 <std+0x68>)
 8003c04:	6224      	str	r4, [r4, #32]
 8003c06:	429c      	cmp	r4, r3
 8003c08:	d006      	beq.n	8003c18 <std+0x48>
 8003c0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003c0e:	4294      	cmp	r4, r2
 8003c10:	d002      	beq.n	8003c18 <std+0x48>
 8003c12:	33d0      	adds	r3, #208	; 0xd0
 8003c14:	429c      	cmp	r4, r3
 8003c16:	d105      	bne.n	8003c24 <std+0x54>
 8003c18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c20:	f000 bb0c 	b.w	800423c <__retarget_lock_init_recursive>
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	bf00      	nop
 8003c28:	08003f9d 	.word	0x08003f9d
 8003c2c:	08003fbf 	.word	0x08003fbf
 8003c30:	08003ff7 	.word	0x08003ff7
 8003c34:	0800401b 	.word	0x0800401b
 8003c38:	200001a0 	.word	0x200001a0

08003c3c <stdio_exit_handler>:
 8003c3c:	4a02      	ldr	r2, [pc, #8]	; (8003c48 <stdio_exit_handler+0xc>)
 8003c3e:	4903      	ldr	r1, [pc, #12]	; (8003c4c <stdio_exit_handler+0x10>)
 8003c40:	4803      	ldr	r0, [pc, #12]	; (8003c50 <stdio_exit_handler+0x14>)
 8003c42:	f000 b869 	b.w	8003d18 <_fwalk_sglue>
 8003c46:	bf00      	nop
 8003c48:	2000005c 	.word	0x2000005c
 8003c4c:	08004af9 	.word	0x08004af9
 8003c50:	20000068 	.word	0x20000068

08003c54 <cleanup_stdio>:
 8003c54:	6841      	ldr	r1, [r0, #4]
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <cleanup_stdio+0x34>)
 8003c58:	4299      	cmp	r1, r3
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	d001      	beq.n	8003c64 <cleanup_stdio+0x10>
 8003c60:	f000 ff4a 	bl	8004af8 <_fflush_r>
 8003c64:	68a1      	ldr	r1, [r4, #8]
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <cleanup_stdio+0x38>)
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	d002      	beq.n	8003c72 <cleanup_stdio+0x1e>
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f000 ff43 	bl	8004af8 <_fflush_r>
 8003c72:	68e1      	ldr	r1, [r4, #12]
 8003c74:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <cleanup_stdio+0x3c>)
 8003c76:	4299      	cmp	r1, r3
 8003c78:	d004      	beq.n	8003c84 <cleanup_stdio+0x30>
 8003c7a:	4620      	mov	r0, r4
 8003c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c80:	f000 bf3a 	b.w	8004af8 <_fflush_r>
 8003c84:	bd10      	pop	{r4, pc}
 8003c86:	bf00      	nop
 8003c88:	200001a0 	.word	0x200001a0
 8003c8c:	20000208 	.word	0x20000208
 8003c90:	20000270 	.word	0x20000270

08003c94 <global_stdio_init.part.0>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <global_stdio_init.part.0+0x30>)
 8003c98:	4c0b      	ldr	r4, [pc, #44]	; (8003cc8 <global_stdio_init.part.0+0x34>)
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <global_stdio_init.part.0+0x38>)
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	4620      	mov	r0, r4
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2104      	movs	r1, #4
 8003ca4:	f7ff ff94 	bl	8003bd0 <std>
 8003ca8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cac:	2201      	movs	r2, #1
 8003cae:	2109      	movs	r1, #9
 8003cb0:	f7ff ff8e 	bl	8003bd0 <std>
 8003cb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003cb8:	2202      	movs	r2, #2
 8003cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cbe:	2112      	movs	r1, #18
 8003cc0:	f7ff bf86 	b.w	8003bd0 <std>
 8003cc4:	200002d8 	.word	0x200002d8
 8003cc8:	200001a0 	.word	0x200001a0
 8003ccc:	08003c3d 	.word	0x08003c3d

08003cd0 <__sfp_lock_acquire>:
 8003cd0:	4801      	ldr	r0, [pc, #4]	; (8003cd8 <__sfp_lock_acquire+0x8>)
 8003cd2:	f000 bab4 	b.w	800423e <__retarget_lock_acquire_recursive>
 8003cd6:	bf00      	nop
 8003cd8:	200002e1 	.word	0x200002e1

08003cdc <__sfp_lock_release>:
 8003cdc:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <__sfp_lock_release+0x8>)
 8003cde:	f000 baaf 	b.w	8004240 <__retarget_lock_release_recursive>
 8003ce2:	bf00      	nop
 8003ce4:	200002e1 	.word	0x200002e1

08003ce8 <__sinit>:
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	4604      	mov	r4, r0
 8003cec:	f7ff fff0 	bl	8003cd0 <__sfp_lock_acquire>
 8003cf0:	6a23      	ldr	r3, [r4, #32]
 8003cf2:	b11b      	cbz	r3, 8003cfc <__sinit+0x14>
 8003cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cf8:	f7ff bff0 	b.w	8003cdc <__sfp_lock_release>
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <__sinit+0x28>)
 8003cfe:	6223      	str	r3, [r4, #32]
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__sinit+0x2c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f5      	bne.n	8003cf4 <__sinit+0xc>
 8003d08:	f7ff ffc4 	bl	8003c94 <global_stdio_init.part.0>
 8003d0c:	e7f2      	b.n	8003cf4 <__sinit+0xc>
 8003d0e:	bf00      	nop
 8003d10:	08003c55 	.word	0x08003c55
 8003d14:	200002d8 	.word	0x200002d8

08003d18 <_fwalk_sglue>:
 8003d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	4688      	mov	r8, r1
 8003d20:	4614      	mov	r4, r2
 8003d22:	2600      	movs	r6, #0
 8003d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d28:	f1b9 0901 	subs.w	r9, r9, #1
 8003d2c:	d505      	bpl.n	8003d3a <_fwalk_sglue+0x22>
 8003d2e:	6824      	ldr	r4, [r4, #0]
 8003d30:	2c00      	cmp	r4, #0
 8003d32:	d1f7      	bne.n	8003d24 <_fwalk_sglue+0xc>
 8003d34:	4630      	mov	r0, r6
 8003d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d907      	bls.n	8003d50 <_fwalk_sglue+0x38>
 8003d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d44:	3301      	adds	r3, #1
 8003d46:	d003      	beq.n	8003d50 <_fwalk_sglue+0x38>
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4638      	mov	r0, r7
 8003d4c:	47c0      	blx	r8
 8003d4e:	4306      	orrs	r6, r0
 8003d50:	3568      	adds	r5, #104	; 0x68
 8003d52:	e7e9      	b.n	8003d28 <_fwalk_sglue+0x10>

08003d54 <iprintf>:
 8003d54:	b40f      	push	{r0, r1, r2, r3}
 8003d56:	b507      	push	{r0, r1, r2, lr}
 8003d58:	4906      	ldr	r1, [pc, #24]	; (8003d74 <iprintf+0x20>)
 8003d5a:	ab04      	add	r3, sp, #16
 8003d5c:	6808      	ldr	r0, [r1, #0]
 8003d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d62:	6881      	ldr	r1, [r0, #8]
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	f000 fb97 	bl	8004498 <_vfiprintf_r>
 8003d6a:	b003      	add	sp, #12
 8003d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d70:	b004      	add	sp, #16
 8003d72:	4770      	bx	lr
 8003d74:	200000b4 	.word	0x200000b4

08003d78 <_puts_r>:
 8003d78:	6a03      	ldr	r3, [r0, #32]
 8003d7a:	b570      	push	{r4, r5, r6, lr}
 8003d7c:	6884      	ldr	r4, [r0, #8]
 8003d7e:	4605      	mov	r5, r0
 8003d80:	460e      	mov	r6, r1
 8003d82:	b90b      	cbnz	r3, 8003d88 <_puts_r+0x10>
 8003d84:	f7ff ffb0 	bl	8003ce8 <__sinit>
 8003d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d8a:	07db      	lsls	r3, r3, #31
 8003d8c:	d405      	bmi.n	8003d9a <_puts_r+0x22>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	0598      	lsls	r0, r3, #22
 8003d92:	d402      	bmi.n	8003d9a <_puts_r+0x22>
 8003d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d96:	f000 fa52 	bl	800423e <__retarget_lock_acquire_recursive>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	0719      	lsls	r1, r3, #28
 8003d9e:	d513      	bpl.n	8003dc8 <_puts_r+0x50>
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	b18b      	cbz	r3, 8003dc8 <_puts_r+0x50>
 8003da4:	3e01      	subs	r6, #1
 8003da6:	68a3      	ldr	r3, [r4, #8]
 8003da8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60a3      	str	r3, [r4, #8]
 8003db0:	b9e9      	cbnz	r1, 8003dee <_puts_r+0x76>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da2e      	bge.n	8003e14 <_puts_r+0x9c>
 8003db6:	4622      	mov	r2, r4
 8003db8:	210a      	movs	r1, #10
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f931 	bl	8004022 <__swbuf_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d007      	beq.n	8003dd4 <_puts_r+0x5c>
 8003dc4:	250a      	movs	r5, #10
 8003dc6:	e007      	b.n	8003dd8 <_puts_r+0x60>
 8003dc8:	4621      	mov	r1, r4
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f000 f966 	bl	800409c <__swsetup_r>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	d0e7      	beq.n	8003da4 <_puts_r+0x2c>
 8003dd4:	f04f 35ff 	mov.w	r5, #4294967295
 8003dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dda:	07da      	lsls	r2, r3, #31
 8003ddc:	d405      	bmi.n	8003dea <_puts_r+0x72>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	059b      	lsls	r3, r3, #22
 8003de2:	d402      	bmi.n	8003dea <_puts_r+0x72>
 8003de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003de6:	f000 fa2b 	bl	8004240 <__retarget_lock_release_recursive>
 8003dea:	4628      	mov	r0, r5
 8003dec:	bd70      	pop	{r4, r5, r6, pc}
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	da04      	bge.n	8003dfc <_puts_r+0x84>
 8003df2:	69a2      	ldr	r2, [r4, #24]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	dc06      	bgt.n	8003e06 <_puts_r+0x8e>
 8003df8:	290a      	cmp	r1, #10
 8003dfa:	d004      	beq.n	8003e06 <_puts_r+0x8e>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	6022      	str	r2, [r4, #0]
 8003e02:	7019      	strb	r1, [r3, #0]
 8003e04:	e7cf      	b.n	8003da6 <_puts_r+0x2e>
 8003e06:	4622      	mov	r2, r4
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f000 f90a 	bl	8004022 <__swbuf_r>
 8003e0e:	3001      	adds	r0, #1
 8003e10:	d1c9      	bne.n	8003da6 <_puts_r+0x2e>
 8003e12:	e7df      	b.n	8003dd4 <_puts_r+0x5c>
 8003e14:	6823      	ldr	r3, [r4, #0]
 8003e16:	250a      	movs	r5, #10
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	6022      	str	r2, [r4, #0]
 8003e1c:	701d      	strb	r5, [r3, #0]
 8003e1e:	e7db      	b.n	8003dd8 <_puts_r+0x60>

08003e20 <puts>:
 8003e20:	4b02      	ldr	r3, [pc, #8]	; (8003e2c <puts+0xc>)
 8003e22:	4601      	mov	r1, r0
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f7ff bfa7 	b.w	8003d78 <_puts_r>
 8003e2a:	bf00      	nop
 8003e2c:	200000b4 	.word	0x200000b4

08003e30 <setbuf>:
 8003e30:	fab1 f281 	clz	r2, r1
 8003e34:	0952      	lsrs	r2, r2, #5
 8003e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e3a:	0052      	lsls	r2, r2, #1
 8003e3c:	f000 b800 	b.w	8003e40 <setvbuf>

08003e40 <setvbuf>:
 8003e40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e44:	461d      	mov	r5, r3
 8003e46:	4b54      	ldr	r3, [pc, #336]	; (8003f98 <setvbuf+0x158>)
 8003e48:	681f      	ldr	r7, [r3, #0]
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460e      	mov	r6, r1
 8003e4e:	4690      	mov	r8, r2
 8003e50:	b127      	cbz	r7, 8003e5c <setvbuf+0x1c>
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	b913      	cbnz	r3, 8003e5c <setvbuf+0x1c>
 8003e56:	4638      	mov	r0, r7
 8003e58:	f7ff ff46 	bl	8003ce8 <__sinit>
 8003e5c:	f1b8 0f02 	cmp.w	r8, #2
 8003e60:	d006      	beq.n	8003e70 <setvbuf+0x30>
 8003e62:	f1b8 0f01 	cmp.w	r8, #1
 8003e66:	f200 8094 	bhi.w	8003f92 <setvbuf+0x152>
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	f2c0 8091 	blt.w	8003f92 <setvbuf+0x152>
 8003e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e72:	07da      	lsls	r2, r3, #31
 8003e74:	d405      	bmi.n	8003e82 <setvbuf+0x42>
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	059b      	lsls	r3, r3, #22
 8003e7a:	d402      	bmi.n	8003e82 <setvbuf+0x42>
 8003e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e7e:	f000 f9de 	bl	800423e <__retarget_lock_acquire_recursive>
 8003e82:	4621      	mov	r1, r4
 8003e84:	4638      	mov	r0, r7
 8003e86:	f000 fe37 	bl	8004af8 <_fflush_r>
 8003e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e8c:	b141      	cbz	r1, 8003ea0 <setvbuf+0x60>
 8003e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e92:	4299      	cmp	r1, r3
 8003e94:	d002      	beq.n	8003e9c <setvbuf+0x5c>
 8003e96:	4638      	mov	r0, r7
 8003e98:	f000 f9d4 	bl	8004244 <_free_r>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	6363      	str	r3, [r4, #52]	; 0x34
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61a3      	str	r3, [r4, #24]
 8003ea4:	6063      	str	r3, [r4, #4]
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	0618      	lsls	r0, r3, #24
 8003eaa:	d503      	bpl.n	8003eb4 <setvbuf+0x74>
 8003eac:	6921      	ldr	r1, [r4, #16]
 8003eae:	4638      	mov	r0, r7
 8003eb0:	f000 f9c8 	bl	8004244 <_free_r>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003eba:	f023 0303 	bic.w	r3, r3, #3
 8003ebe:	f1b8 0f02 	cmp.w	r8, #2
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	d05f      	beq.n	8003f86 <setvbuf+0x146>
 8003ec6:	ab01      	add	r3, sp, #4
 8003ec8:	466a      	mov	r2, sp
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4638      	mov	r0, r7
 8003ece:	f000 fe3b 	bl	8004b48 <__swhatbuf_r>
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	4318      	orrs	r0, r3
 8003ed6:	81a0      	strh	r0, [r4, #12]
 8003ed8:	bb2d      	cbnz	r5, 8003f26 <setvbuf+0xe6>
 8003eda:	9d00      	ldr	r5, [sp, #0]
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f9fd 	bl	80042dc <malloc>
 8003ee2:	4606      	mov	r6, r0
 8003ee4:	2800      	cmp	r0, #0
 8003ee6:	d150      	bne.n	8003f8a <setvbuf+0x14a>
 8003ee8:	f8dd 9000 	ldr.w	r9, [sp]
 8003eec:	45a9      	cmp	r9, r5
 8003eee:	d13e      	bne.n	8003f6e <setvbuf+0x12e>
 8003ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	60a2      	str	r2, [r4, #8]
 8003ef8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003efc:	6022      	str	r2, [r4, #0]
 8003efe:	6122      	str	r2, [r4, #16]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f06:	6162      	str	r2, [r4, #20]
 8003f08:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f0a:	f043 0302 	orr.w	r3, r3, #2
 8003f0e:	07d1      	lsls	r1, r2, #31
 8003f10:	81a3      	strh	r3, [r4, #12]
 8003f12:	d404      	bmi.n	8003f1e <setvbuf+0xde>
 8003f14:	059b      	lsls	r3, r3, #22
 8003f16:	d402      	bmi.n	8003f1e <setvbuf+0xde>
 8003f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f1a:	f000 f991 	bl	8004240 <__retarget_lock_release_recursive>
 8003f1e:	4628      	mov	r0, r5
 8003f20:	b003      	add	sp, #12
 8003f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f26:	2e00      	cmp	r6, #0
 8003f28:	d0d8      	beq.n	8003edc <setvbuf+0x9c>
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	b913      	cbnz	r3, 8003f34 <setvbuf+0xf4>
 8003f2e:	4638      	mov	r0, r7
 8003f30:	f7ff feda 	bl	8003ce8 <__sinit>
 8003f34:	f1b8 0f01 	cmp.w	r8, #1
 8003f38:	bf08      	it	eq
 8003f3a:	89a3      	ldrheq	r3, [r4, #12]
 8003f3c:	6026      	str	r6, [r4, #0]
 8003f3e:	bf04      	itt	eq
 8003f40:	f043 0301 	orreq.w	r3, r3, #1
 8003f44:	81a3      	strheq	r3, [r4, #12]
 8003f46:	89a3      	ldrh	r3, [r4, #12]
 8003f48:	f013 0208 	ands.w	r2, r3, #8
 8003f4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003f50:	d01d      	beq.n	8003f8e <setvbuf+0x14e>
 8003f52:	07da      	lsls	r2, r3, #31
 8003f54:	bf41      	itttt	mi
 8003f56:	2200      	movmi	r2, #0
 8003f58:	426d      	negmi	r5, r5
 8003f5a:	60a2      	strmi	r2, [r4, #8]
 8003f5c:	61a5      	strmi	r5, [r4, #24]
 8003f5e:	bf58      	it	pl
 8003f60:	60a5      	strpl	r5, [r4, #8]
 8003f62:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003f64:	f015 0501 	ands.w	r5, r5, #1
 8003f68:	d0d4      	beq.n	8003f14 <setvbuf+0xd4>
 8003f6a:	2500      	movs	r5, #0
 8003f6c:	e7d7      	b.n	8003f1e <setvbuf+0xde>
 8003f6e:	4648      	mov	r0, r9
 8003f70:	f000 f9b4 	bl	80042dc <malloc>
 8003f74:	4606      	mov	r6, r0
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d0ba      	beq.n	8003ef0 <setvbuf+0xb0>
 8003f7a:	89a3      	ldrh	r3, [r4, #12]
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	464d      	mov	r5, r9
 8003f84:	e7d1      	b.n	8003f2a <setvbuf+0xea>
 8003f86:	2500      	movs	r5, #0
 8003f88:	e7b4      	b.n	8003ef4 <setvbuf+0xb4>
 8003f8a:	46a9      	mov	r9, r5
 8003f8c:	e7f5      	b.n	8003f7a <setvbuf+0x13a>
 8003f8e:	60a2      	str	r2, [r4, #8]
 8003f90:	e7e7      	b.n	8003f62 <setvbuf+0x122>
 8003f92:	f04f 35ff 	mov.w	r5, #4294967295
 8003f96:	e7c2      	b.n	8003f1e <setvbuf+0xde>
 8003f98:	200000b4 	.word	0x200000b4

08003f9c <__sread>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	f000 f8fc 	bl	80041a0 <_read_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	bfab      	itete	ge
 8003fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fae:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb0:	181b      	addge	r3, r3, r0
 8003fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fb6:	bfac      	ite	ge
 8003fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fba:	81a3      	strhlt	r3, [r4, #12]
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <__swrite>:
 8003fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc2:	461f      	mov	r7, r3
 8003fc4:	898b      	ldrh	r3, [r1, #12]
 8003fc6:	05db      	lsls	r3, r3, #23
 8003fc8:	4605      	mov	r5, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4616      	mov	r6, r2
 8003fce:	d505      	bpl.n	8003fdc <__swrite+0x1e>
 8003fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f000 f8d0 	bl	800417c <_lseek_r>
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe6:	81a3      	strh	r3, [r4, #12]
 8003fe8:	4632      	mov	r2, r6
 8003fea:	463b      	mov	r3, r7
 8003fec:	4628      	mov	r0, r5
 8003fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff2:	f000 b8e7 	b.w	80041c4 <_write_r>

08003ff6 <__sseek>:
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffe:	f000 f8bd 	bl	800417c <_lseek_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	bf15      	itete	ne
 8004008:	6560      	strne	r0, [r4, #84]	; 0x54
 800400a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800400e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004012:	81a3      	strheq	r3, [r4, #12]
 8004014:	bf18      	it	ne
 8004016:	81a3      	strhne	r3, [r4, #12]
 8004018:	bd10      	pop	{r4, pc}

0800401a <__sclose>:
 800401a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401e:	f000 b89d 	b.w	800415c <_close_r>

08004022 <__swbuf_r>:
 8004022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004024:	460e      	mov	r6, r1
 8004026:	4614      	mov	r4, r2
 8004028:	4605      	mov	r5, r0
 800402a:	b118      	cbz	r0, 8004034 <__swbuf_r+0x12>
 800402c:	6a03      	ldr	r3, [r0, #32]
 800402e:	b90b      	cbnz	r3, 8004034 <__swbuf_r+0x12>
 8004030:	f7ff fe5a 	bl	8003ce8 <__sinit>
 8004034:	69a3      	ldr	r3, [r4, #24]
 8004036:	60a3      	str	r3, [r4, #8]
 8004038:	89a3      	ldrh	r3, [r4, #12]
 800403a:	071a      	lsls	r2, r3, #28
 800403c:	d525      	bpl.n	800408a <__swbuf_r+0x68>
 800403e:	6923      	ldr	r3, [r4, #16]
 8004040:	b31b      	cbz	r3, 800408a <__swbuf_r+0x68>
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	1a98      	subs	r0, r3, r2
 8004048:	6963      	ldr	r3, [r4, #20]
 800404a:	b2f6      	uxtb	r6, r6
 800404c:	4283      	cmp	r3, r0
 800404e:	4637      	mov	r7, r6
 8004050:	dc04      	bgt.n	800405c <__swbuf_r+0x3a>
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 fd4f 	bl	8004af8 <_fflush_r>
 800405a:	b9e0      	cbnz	r0, 8004096 <__swbuf_r+0x74>
 800405c:	68a3      	ldr	r3, [r4, #8]
 800405e:	3b01      	subs	r3, #1
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	6022      	str	r2, [r4, #0]
 8004068:	701e      	strb	r6, [r3, #0]
 800406a:	6962      	ldr	r2, [r4, #20]
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	429a      	cmp	r2, r3
 8004070:	d004      	beq.n	800407c <__swbuf_r+0x5a>
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	07db      	lsls	r3, r3, #31
 8004076:	d506      	bpl.n	8004086 <__swbuf_r+0x64>
 8004078:	2e0a      	cmp	r6, #10
 800407a:	d104      	bne.n	8004086 <__swbuf_r+0x64>
 800407c:	4621      	mov	r1, r4
 800407e:	4628      	mov	r0, r5
 8004080:	f000 fd3a 	bl	8004af8 <_fflush_r>
 8004084:	b938      	cbnz	r0, 8004096 <__swbuf_r+0x74>
 8004086:	4638      	mov	r0, r7
 8004088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 f805 	bl	800409c <__swsetup_r>
 8004092:	2800      	cmp	r0, #0
 8004094:	d0d5      	beq.n	8004042 <__swbuf_r+0x20>
 8004096:	f04f 37ff 	mov.w	r7, #4294967295
 800409a:	e7f4      	b.n	8004086 <__swbuf_r+0x64>

0800409c <__swsetup_r>:
 800409c:	b538      	push	{r3, r4, r5, lr}
 800409e:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <__swsetup_r+0xac>)
 80040a0:	4605      	mov	r5, r0
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	460c      	mov	r4, r1
 80040a6:	b118      	cbz	r0, 80040b0 <__swsetup_r+0x14>
 80040a8:	6a03      	ldr	r3, [r0, #32]
 80040aa:	b90b      	cbnz	r3, 80040b0 <__swsetup_r+0x14>
 80040ac:	f7ff fe1c 	bl	8003ce8 <__sinit>
 80040b0:	89a3      	ldrh	r3, [r4, #12]
 80040b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040b6:	0718      	lsls	r0, r3, #28
 80040b8:	d422      	bmi.n	8004100 <__swsetup_r+0x64>
 80040ba:	06d9      	lsls	r1, r3, #27
 80040bc:	d407      	bmi.n	80040ce <__swsetup_r+0x32>
 80040be:	2309      	movs	r3, #9
 80040c0:	602b      	str	r3, [r5, #0]
 80040c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040c6:	81a3      	strh	r3, [r4, #12]
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	e034      	b.n	8004138 <__swsetup_r+0x9c>
 80040ce:	0758      	lsls	r0, r3, #29
 80040d0:	d512      	bpl.n	80040f8 <__swsetup_r+0x5c>
 80040d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040d4:	b141      	cbz	r1, 80040e8 <__swsetup_r+0x4c>
 80040d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040da:	4299      	cmp	r1, r3
 80040dc:	d002      	beq.n	80040e4 <__swsetup_r+0x48>
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 f8b0 	bl	8004244 <_free_r>
 80040e4:	2300      	movs	r3, #0
 80040e6:	6363      	str	r3, [r4, #52]	; 0x34
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	2300      	movs	r3, #0
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	6923      	ldr	r3, [r4, #16]
 80040f6:	6023      	str	r3, [r4, #0]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f043 0308 	orr.w	r3, r3, #8
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	b94b      	cbnz	r3, 8004118 <__swsetup_r+0x7c>
 8004104:	89a3      	ldrh	r3, [r4, #12]
 8004106:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800410a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800410e:	d003      	beq.n	8004118 <__swsetup_r+0x7c>
 8004110:	4621      	mov	r1, r4
 8004112:	4628      	mov	r0, r5
 8004114:	f000 fd3e 	bl	8004b94 <__smakebuf_r>
 8004118:	89a0      	ldrh	r0, [r4, #12]
 800411a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800411e:	f010 0301 	ands.w	r3, r0, #1
 8004122:	d00a      	beq.n	800413a <__swsetup_r+0x9e>
 8004124:	2300      	movs	r3, #0
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	6963      	ldr	r3, [r4, #20]
 800412a:	425b      	negs	r3, r3
 800412c:	61a3      	str	r3, [r4, #24]
 800412e:	6923      	ldr	r3, [r4, #16]
 8004130:	b943      	cbnz	r3, 8004144 <__swsetup_r+0xa8>
 8004132:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004136:	d1c4      	bne.n	80040c2 <__swsetup_r+0x26>
 8004138:	bd38      	pop	{r3, r4, r5, pc}
 800413a:	0781      	lsls	r1, r0, #30
 800413c:	bf58      	it	pl
 800413e:	6963      	ldrpl	r3, [r4, #20]
 8004140:	60a3      	str	r3, [r4, #8]
 8004142:	e7f4      	b.n	800412e <__swsetup_r+0x92>
 8004144:	2000      	movs	r0, #0
 8004146:	e7f7      	b.n	8004138 <__swsetup_r+0x9c>
 8004148:	200000b4 	.word	0x200000b4

0800414c <memset>:
 800414c:	4402      	add	r2, r0
 800414e:	4603      	mov	r3, r0
 8004150:	4293      	cmp	r3, r2
 8004152:	d100      	bne.n	8004156 <memset+0xa>
 8004154:	4770      	bx	lr
 8004156:	f803 1b01 	strb.w	r1, [r3], #1
 800415a:	e7f9      	b.n	8004150 <memset+0x4>

0800415c <_close_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4d06      	ldr	r5, [pc, #24]	; (8004178 <_close_r+0x1c>)
 8004160:	2300      	movs	r3, #0
 8004162:	4604      	mov	r4, r0
 8004164:	4608      	mov	r0, r1
 8004166:	602b      	str	r3, [r5, #0]
 8004168:	f7fc fd53 	bl	8000c12 <_close>
 800416c:	1c43      	adds	r3, r0, #1
 800416e:	d102      	bne.n	8004176 <_close_r+0x1a>
 8004170:	682b      	ldr	r3, [r5, #0]
 8004172:	b103      	cbz	r3, 8004176 <_close_r+0x1a>
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	bd38      	pop	{r3, r4, r5, pc}
 8004178:	200002dc 	.word	0x200002dc

0800417c <_lseek_r>:
 800417c:	b538      	push	{r3, r4, r5, lr}
 800417e:	4d07      	ldr	r5, [pc, #28]	; (800419c <_lseek_r+0x20>)
 8004180:	4604      	mov	r4, r0
 8004182:	4608      	mov	r0, r1
 8004184:	4611      	mov	r1, r2
 8004186:	2200      	movs	r2, #0
 8004188:	602a      	str	r2, [r5, #0]
 800418a:	461a      	mov	r2, r3
 800418c:	f7fc fd68 	bl	8000c60 <_lseek>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_lseek_r+0x1e>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_lseek_r+0x1e>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	200002dc 	.word	0x200002dc

080041a0 <_read_r>:
 80041a0:	b538      	push	{r3, r4, r5, lr}
 80041a2:	4d07      	ldr	r5, [pc, #28]	; (80041c0 <_read_r+0x20>)
 80041a4:	4604      	mov	r4, r0
 80041a6:	4608      	mov	r0, r1
 80041a8:	4611      	mov	r1, r2
 80041aa:	2200      	movs	r2, #0
 80041ac:	602a      	str	r2, [r5, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f7fc fcf6 	bl	8000ba0 <_read>
 80041b4:	1c43      	adds	r3, r0, #1
 80041b6:	d102      	bne.n	80041be <_read_r+0x1e>
 80041b8:	682b      	ldr	r3, [r5, #0]
 80041ba:	b103      	cbz	r3, 80041be <_read_r+0x1e>
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	bd38      	pop	{r3, r4, r5, pc}
 80041c0:	200002dc 	.word	0x200002dc

080041c4 <_write_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d07      	ldr	r5, [pc, #28]	; (80041e4 <_write_r+0x20>)
 80041c8:	4604      	mov	r4, r0
 80041ca:	4608      	mov	r0, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	2200      	movs	r2, #0
 80041d0:	602a      	str	r2, [r5, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7fc fd01 	bl	8000bda <_write>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_write_r+0x1e>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_write_r+0x1e>
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	200002dc 	.word	0x200002dc

080041e8 <__errno>:
 80041e8:	4b01      	ldr	r3, [pc, #4]	; (80041f0 <__errno+0x8>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	200000b4 	.word	0x200000b4

080041f4 <__libc_init_array>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	4d0d      	ldr	r5, [pc, #52]	; (800422c <__libc_init_array+0x38>)
 80041f8:	4c0d      	ldr	r4, [pc, #52]	; (8004230 <__libc_init_array+0x3c>)
 80041fa:	1b64      	subs	r4, r4, r5
 80041fc:	10a4      	asrs	r4, r4, #2
 80041fe:	2600      	movs	r6, #0
 8004200:	42a6      	cmp	r6, r4
 8004202:	d109      	bne.n	8004218 <__libc_init_array+0x24>
 8004204:	4d0b      	ldr	r5, [pc, #44]	; (8004234 <__libc_init_array+0x40>)
 8004206:	4c0c      	ldr	r4, [pc, #48]	; (8004238 <__libc_init_array+0x44>)
 8004208:	f000 fd32 	bl	8004c70 <_init>
 800420c:	1b64      	subs	r4, r4, r5
 800420e:	10a4      	asrs	r4, r4, #2
 8004210:	2600      	movs	r6, #0
 8004212:	42a6      	cmp	r6, r4
 8004214:	d105      	bne.n	8004222 <__libc_init_array+0x2e>
 8004216:	bd70      	pop	{r4, r5, r6, pc}
 8004218:	f855 3b04 	ldr.w	r3, [r5], #4
 800421c:	4798      	blx	r3
 800421e:	3601      	adds	r6, #1
 8004220:	e7ee      	b.n	8004200 <__libc_init_array+0xc>
 8004222:	f855 3b04 	ldr.w	r3, [r5], #4
 8004226:	4798      	blx	r3
 8004228:	3601      	adds	r6, #1
 800422a:	e7f2      	b.n	8004212 <__libc_init_array+0x1e>
 800422c:	08004f74 	.word	0x08004f74
 8004230:	08004f74 	.word	0x08004f74
 8004234:	08004f74 	.word	0x08004f74
 8004238:	08004f78 	.word	0x08004f78

0800423c <__retarget_lock_init_recursive>:
 800423c:	4770      	bx	lr

0800423e <__retarget_lock_acquire_recursive>:
 800423e:	4770      	bx	lr

08004240 <__retarget_lock_release_recursive>:
 8004240:	4770      	bx	lr
	...

08004244 <_free_r>:
 8004244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004246:	2900      	cmp	r1, #0
 8004248:	d044      	beq.n	80042d4 <_free_r+0x90>
 800424a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800424e:	9001      	str	r0, [sp, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f1a1 0404 	sub.w	r4, r1, #4
 8004256:	bfb8      	it	lt
 8004258:	18e4      	addlt	r4, r4, r3
 800425a:	f000 f8e7 	bl	800442c <__malloc_lock>
 800425e:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <_free_r+0x94>)
 8004260:	9801      	ldr	r0, [sp, #4]
 8004262:	6813      	ldr	r3, [r2, #0]
 8004264:	b933      	cbnz	r3, 8004274 <_free_r+0x30>
 8004266:	6063      	str	r3, [r4, #4]
 8004268:	6014      	str	r4, [r2, #0]
 800426a:	b003      	add	sp, #12
 800426c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004270:	f000 b8e2 	b.w	8004438 <__malloc_unlock>
 8004274:	42a3      	cmp	r3, r4
 8004276:	d908      	bls.n	800428a <_free_r+0x46>
 8004278:	6825      	ldr	r5, [r4, #0]
 800427a:	1961      	adds	r1, r4, r5
 800427c:	428b      	cmp	r3, r1
 800427e:	bf01      	itttt	eq
 8004280:	6819      	ldreq	r1, [r3, #0]
 8004282:	685b      	ldreq	r3, [r3, #4]
 8004284:	1949      	addeq	r1, r1, r5
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	e7ed      	b.n	8004266 <_free_r+0x22>
 800428a:	461a      	mov	r2, r3
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	b10b      	cbz	r3, 8004294 <_free_r+0x50>
 8004290:	42a3      	cmp	r3, r4
 8004292:	d9fa      	bls.n	800428a <_free_r+0x46>
 8004294:	6811      	ldr	r1, [r2, #0]
 8004296:	1855      	adds	r5, r2, r1
 8004298:	42a5      	cmp	r5, r4
 800429a:	d10b      	bne.n	80042b4 <_free_r+0x70>
 800429c:	6824      	ldr	r4, [r4, #0]
 800429e:	4421      	add	r1, r4
 80042a0:	1854      	adds	r4, r2, r1
 80042a2:	42a3      	cmp	r3, r4
 80042a4:	6011      	str	r1, [r2, #0]
 80042a6:	d1e0      	bne.n	800426a <_free_r+0x26>
 80042a8:	681c      	ldr	r4, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	6053      	str	r3, [r2, #4]
 80042ae:	440c      	add	r4, r1
 80042b0:	6014      	str	r4, [r2, #0]
 80042b2:	e7da      	b.n	800426a <_free_r+0x26>
 80042b4:	d902      	bls.n	80042bc <_free_r+0x78>
 80042b6:	230c      	movs	r3, #12
 80042b8:	6003      	str	r3, [r0, #0]
 80042ba:	e7d6      	b.n	800426a <_free_r+0x26>
 80042bc:	6825      	ldr	r5, [r4, #0]
 80042be:	1961      	adds	r1, r4, r5
 80042c0:	428b      	cmp	r3, r1
 80042c2:	bf04      	itt	eq
 80042c4:	6819      	ldreq	r1, [r3, #0]
 80042c6:	685b      	ldreq	r3, [r3, #4]
 80042c8:	6063      	str	r3, [r4, #4]
 80042ca:	bf04      	itt	eq
 80042cc:	1949      	addeq	r1, r1, r5
 80042ce:	6021      	streq	r1, [r4, #0]
 80042d0:	6054      	str	r4, [r2, #4]
 80042d2:	e7ca      	b.n	800426a <_free_r+0x26>
 80042d4:	b003      	add	sp, #12
 80042d6:	bd30      	pop	{r4, r5, pc}
 80042d8:	200002e4 	.word	0x200002e4

080042dc <malloc>:
 80042dc:	4b02      	ldr	r3, [pc, #8]	; (80042e8 <malloc+0xc>)
 80042de:	4601      	mov	r1, r0
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	f000 b823 	b.w	800432c <_malloc_r>
 80042e6:	bf00      	nop
 80042e8:	200000b4 	.word	0x200000b4

080042ec <sbrk_aligned>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4e0e      	ldr	r6, [pc, #56]	; (8004328 <sbrk_aligned+0x3c>)
 80042f0:	460c      	mov	r4, r1
 80042f2:	6831      	ldr	r1, [r6, #0]
 80042f4:	4605      	mov	r5, r0
 80042f6:	b911      	cbnz	r1, 80042fe <sbrk_aligned+0x12>
 80042f8:	f000 fcaa 	bl	8004c50 <_sbrk_r>
 80042fc:	6030      	str	r0, [r6, #0]
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 fca5 	bl	8004c50 <_sbrk_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d00a      	beq.n	8004320 <sbrk_aligned+0x34>
 800430a:	1cc4      	adds	r4, r0, #3
 800430c:	f024 0403 	bic.w	r4, r4, #3
 8004310:	42a0      	cmp	r0, r4
 8004312:	d007      	beq.n	8004324 <sbrk_aligned+0x38>
 8004314:	1a21      	subs	r1, r4, r0
 8004316:	4628      	mov	r0, r5
 8004318:	f000 fc9a 	bl	8004c50 <_sbrk_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d101      	bne.n	8004324 <sbrk_aligned+0x38>
 8004320:	f04f 34ff 	mov.w	r4, #4294967295
 8004324:	4620      	mov	r0, r4
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	200002e8 	.word	0x200002e8

0800432c <_malloc_r>:
 800432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004330:	1ccd      	adds	r5, r1, #3
 8004332:	f025 0503 	bic.w	r5, r5, #3
 8004336:	3508      	adds	r5, #8
 8004338:	2d0c      	cmp	r5, #12
 800433a:	bf38      	it	cc
 800433c:	250c      	movcc	r5, #12
 800433e:	2d00      	cmp	r5, #0
 8004340:	4607      	mov	r7, r0
 8004342:	db01      	blt.n	8004348 <_malloc_r+0x1c>
 8004344:	42a9      	cmp	r1, r5
 8004346:	d905      	bls.n	8004354 <_malloc_r+0x28>
 8004348:	230c      	movs	r3, #12
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	2600      	movs	r6, #0
 800434e:	4630      	mov	r0, r6
 8004350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004428 <_malloc_r+0xfc>
 8004358:	f000 f868 	bl	800442c <__malloc_lock>
 800435c:	f8d8 3000 	ldr.w	r3, [r8]
 8004360:	461c      	mov	r4, r3
 8004362:	bb5c      	cbnz	r4, 80043bc <_malloc_r+0x90>
 8004364:	4629      	mov	r1, r5
 8004366:	4638      	mov	r0, r7
 8004368:	f7ff ffc0 	bl	80042ec <sbrk_aligned>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	4604      	mov	r4, r0
 8004370:	d155      	bne.n	800441e <_malloc_r+0xf2>
 8004372:	f8d8 4000 	ldr.w	r4, [r8]
 8004376:	4626      	mov	r6, r4
 8004378:	2e00      	cmp	r6, #0
 800437a:	d145      	bne.n	8004408 <_malloc_r+0xdc>
 800437c:	2c00      	cmp	r4, #0
 800437e:	d048      	beq.n	8004412 <_malloc_r+0xe6>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	4631      	mov	r1, r6
 8004384:	4638      	mov	r0, r7
 8004386:	eb04 0903 	add.w	r9, r4, r3
 800438a:	f000 fc61 	bl	8004c50 <_sbrk_r>
 800438e:	4581      	cmp	r9, r0
 8004390:	d13f      	bne.n	8004412 <_malloc_r+0xe6>
 8004392:	6821      	ldr	r1, [r4, #0]
 8004394:	1a6d      	subs	r5, r5, r1
 8004396:	4629      	mov	r1, r5
 8004398:	4638      	mov	r0, r7
 800439a:	f7ff ffa7 	bl	80042ec <sbrk_aligned>
 800439e:	3001      	adds	r0, #1
 80043a0:	d037      	beq.n	8004412 <_malloc_r+0xe6>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	442b      	add	r3, r5
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	f8d8 3000 	ldr.w	r3, [r8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d038      	beq.n	8004422 <_malloc_r+0xf6>
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	42a2      	cmp	r2, r4
 80043b4:	d12b      	bne.n	800440e <_malloc_r+0xe2>
 80043b6:	2200      	movs	r2, #0
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	e00f      	b.n	80043dc <_malloc_r+0xb0>
 80043bc:	6822      	ldr	r2, [r4, #0]
 80043be:	1b52      	subs	r2, r2, r5
 80043c0:	d41f      	bmi.n	8004402 <_malloc_r+0xd6>
 80043c2:	2a0b      	cmp	r2, #11
 80043c4:	d917      	bls.n	80043f6 <_malloc_r+0xca>
 80043c6:	1961      	adds	r1, r4, r5
 80043c8:	42a3      	cmp	r3, r4
 80043ca:	6025      	str	r5, [r4, #0]
 80043cc:	bf18      	it	ne
 80043ce:	6059      	strne	r1, [r3, #4]
 80043d0:	6863      	ldr	r3, [r4, #4]
 80043d2:	bf08      	it	eq
 80043d4:	f8c8 1000 	streq.w	r1, [r8]
 80043d8:	5162      	str	r2, [r4, r5]
 80043da:	604b      	str	r3, [r1, #4]
 80043dc:	4638      	mov	r0, r7
 80043de:	f104 060b 	add.w	r6, r4, #11
 80043e2:	f000 f829 	bl	8004438 <__malloc_unlock>
 80043e6:	f026 0607 	bic.w	r6, r6, #7
 80043ea:	1d23      	adds	r3, r4, #4
 80043ec:	1af2      	subs	r2, r6, r3
 80043ee:	d0ae      	beq.n	800434e <_malloc_r+0x22>
 80043f0:	1b9b      	subs	r3, r3, r6
 80043f2:	50a3      	str	r3, [r4, r2]
 80043f4:	e7ab      	b.n	800434e <_malloc_r+0x22>
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	6862      	ldr	r2, [r4, #4]
 80043fa:	d1dd      	bne.n	80043b8 <_malloc_r+0x8c>
 80043fc:	f8c8 2000 	str.w	r2, [r8]
 8004400:	e7ec      	b.n	80043dc <_malloc_r+0xb0>
 8004402:	4623      	mov	r3, r4
 8004404:	6864      	ldr	r4, [r4, #4]
 8004406:	e7ac      	b.n	8004362 <_malloc_r+0x36>
 8004408:	4634      	mov	r4, r6
 800440a:	6876      	ldr	r6, [r6, #4]
 800440c:	e7b4      	b.n	8004378 <_malloc_r+0x4c>
 800440e:	4613      	mov	r3, r2
 8004410:	e7cc      	b.n	80043ac <_malloc_r+0x80>
 8004412:	230c      	movs	r3, #12
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4638      	mov	r0, r7
 8004418:	f000 f80e 	bl	8004438 <__malloc_unlock>
 800441c:	e797      	b.n	800434e <_malloc_r+0x22>
 800441e:	6025      	str	r5, [r4, #0]
 8004420:	e7dc      	b.n	80043dc <_malloc_r+0xb0>
 8004422:	605b      	str	r3, [r3, #4]
 8004424:	deff      	udf	#255	; 0xff
 8004426:	bf00      	nop
 8004428:	200002e4 	.word	0x200002e4

0800442c <__malloc_lock>:
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__malloc_lock+0x8>)
 800442e:	f7ff bf06 	b.w	800423e <__retarget_lock_acquire_recursive>
 8004432:	bf00      	nop
 8004434:	200002e0 	.word	0x200002e0

08004438 <__malloc_unlock>:
 8004438:	4801      	ldr	r0, [pc, #4]	; (8004440 <__malloc_unlock+0x8>)
 800443a:	f7ff bf01 	b.w	8004240 <__retarget_lock_release_recursive>
 800443e:	bf00      	nop
 8004440:	200002e0 	.word	0x200002e0

08004444 <__sfputc_r>:
 8004444:	6893      	ldr	r3, [r2, #8]
 8004446:	3b01      	subs	r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	b410      	push	{r4}
 800444c:	6093      	str	r3, [r2, #8]
 800444e:	da08      	bge.n	8004462 <__sfputc_r+0x1e>
 8004450:	6994      	ldr	r4, [r2, #24]
 8004452:	42a3      	cmp	r3, r4
 8004454:	db01      	blt.n	800445a <__sfputc_r+0x16>
 8004456:	290a      	cmp	r1, #10
 8004458:	d103      	bne.n	8004462 <__sfputc_r+0x1e>
 800445a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800445e:	f7ff bde0 	b.w	8004022 <__swbuf_r>
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	1c58      	adds	r0, r3, #1
 8004466:	6010      	str	r0, [r2, #0]
 8004468:	7019      	strb	r1, [r3, #0]
 800446a:	4608      	mov	r0, r1
 800446c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004470:	4770      	bx	lr

08004472 <__sfputs_r>:
 8004472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004474:	4606      	mov	r6, r0
 8004476:	460f      	mov	r7, r1
 8004478:	4614      	mov	r4, r2
 800447a:	18d5      	adds	r5, r2, r3
 800447c:	42ac      	cmp	r4, r5
 800447e:	d101      	bne.n	8004484 <__sfputs_r+0x12>
 8004480:	2000      	movs	r0, #0
 8004482:	e007      	b.n	8004494 <__sfputs_r+0x22>
 8004484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004488:	463a      	mov	r2, r7
 800448a:	4630      	mov	r0, r6
 800448c:	f7ff ffda 	bl	8004444 <__sfputc_r>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d1f3      	bne.n	800447c <__sfputs_r+0xa>
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004498 <_vfiprintf_r>:
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	460d      	mov	r5, r1
 800449e:	b09d      	sub	sp, #116	; 0x74
 80044a0:	4614      	mov	r4, r2
 80044a2:	4698      	mov	r8, r3
 80044a4:	4606      	mov	r6, r0
 80044a6:	b118      	cbz	r0, 80044b0 <_vfiprintf_r+0x18>
 80044a8:	6a03      	ldr	r3, [r0, #32]
 80044aa:	b90b      	cbnz	r3, 80044b0 <_vfiprintf_r+0x18>
 80044ac:	f7ff fc1c 	bl	8003ce8 <__sinit>
 80044b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b2:	07d9      	lsls	r1, r3, #31
 80044b4:	d405      	bmi.n	80044c2 <_vfiprintf_r+0x2a>
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	059a      	lsls	r2, r3, #22
 80044ba:	d402      	bmi.n	80044c2 <_vfiprintf_r+0x2a>
 80044bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044be:	f7ff febe 	bl	800423e <__retarget_lock_acquire_recursive>
 80044c2:	89ab      	ldrh	r3, [r5, #12]
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	d501      	bpl.n	80044cc <_vfiprintf_r+0x34>
 80044c8:	692b      	ldr	r3, [r5, #16]
 80044ca:	b99b      	cbnz	r3, 80044f4 <_vfiprintf_r+0x5c>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff fde4 	bl	800409c <__swsetup_r>
 80044d4:	b170      	cbz	r0, 80044f4 <_vfiprintf_r+0x5c>
 80044d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044d8:	07dc      	lsls	r4, r3, #31
 80044da:	d504      	bpl.n	80044e6 <_vfiprintf_r+0x4e>
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	b01d      	add	sp, #116	; 0x74
 80044e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	0598      	lsls	r0, r3, #22
 80044ea:	d4f7      	bmi.n	80044dc <_vfiprintf_r+0x44>
 80044ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ee:	f7ff fea7 	bl	8004240 <__retarget_lock_release_recursive>
 80044f2:	e7f3      	b.n	80044dc <_vfiprintf_r+0x44>
 80044f4:	2300      	movs	r3, #0
 80044f6:	9309      	str	r3, [sp, #36]	; 0x24
 80044f8:	2320      	movs	r3, #32
 80044fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004502:	2330      	movs	r3, #48	; 0x30
 8004504:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80046b8 <_vfiprintf_r+0x220>
 8004508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800450c:	f04f 0901 	mov.w	r9, #1
 8004510:	4623      	mov	r3, r4
 8004512:	469a      	mov	sl, r3
 8004514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004518:	b10a      	cbz	r2, 800451e <_vfiprintf_r+0x86>
 800451a:	2a25      	cmp	r2, #37	; 0x25
 800451c:	d1f9      	bne.n	8004512 <_vfiprintf_r+0x7a>
 800451e:	ebba 0b04 	subs.w	fp, sl, r4
 8004522:	d00b      	beq.n	800453c <_vfiprintf_r+0xa4>
 8004524:	465b      	mov	r3, fp
 8004526:	4622      	mov	r2, r4
 8004528:	4629      	mov	r1, r5
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff ffa1 	bl	8004472 <__sfputs_r>
 8004530:	3001      	adds	r0, #1
 8004532:	f000 80a9 	beq.w	8004688 <_vfiprintf_r+0x1f0>
 8004536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004538:	445a      	add	r2, fp
 800453a:	9209      	str	r2, [sp, #36]	; 0x24
 800453c:	f89a 3000 	ldrb.w	r3, [sl]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a1 	beq.w	8004688 <_vfiprintf_r+0x1f0>
 8004546:	2300      	movs	r3, #0
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004550:	f10a 0a01 	add.w	sl, sl, #1
 8004554:	9304      	str	r3, [sp, #16]
 8004556:	9307      	str	r3, [sp, #28]
 8004558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800455c:	931a      	str	r3, [sp, #104]	; 0x68
 800455e:	4654      	mov	r4, sl
 8004560:	2205      	movs	r2, #5
 8004562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004566:	4854      	ldr	r0, [pc, #336]	; (80046b8 <_vfiprintf_r+0x220>)
 8004568:	f7fb fe32 	bl	80001d0 <memchr>
 800456c:	9a04      	ldr	r2, [sp, #16]
 800456e:	b9d8      	cbnz	r0, 80045a8 <_vfiprintf_r+0x110>
 8004570:	06d1      	lsls	r1, r2, #27
 8004572:	bf44      	itt	mi
 8004574:	2320      	movmi	r3, #32
 8004576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457a:	0713      	lsls	r3, r2, #28
 800457c:	bf44      	itt	mi
 800457e:	232b      	movmi	r3, #43	; 0x2b
 8004580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004584:	f89a 3000 	ldrb.w	r3, [sl]
 8004588:	2b2a      	cmp	r3, #42	; 0x2a
 800458a:	d015      	beq.n	80045b8 <_vfiprintf_r+0x120>
 800458c:	9a07      	ldr	r2, [sp, #28]
 800458e:	4654      	mov	r4, sl
 8004590:	2000      	movs	r0, #0
 8004592:	f04f 0c0a 	mov.w	ip, #10
 8004596:	4621      	mov	r1, r4
 8004598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800459c:	3b30      	subs	r3, #48	; 0x30
 800459e:	2b09      	cmp	r3, #9
 80045a0:	d94d      	bls.n	800463e <_vfiprintf_r+0x1a6>
 80045a2:	b1b0      	cbz	r0, 80045d2 <_vfiprintf_r+0x13a>
 80045a4:	9207      	str	r2, [sp, #28]
 80045a6:	e014      	b.n	80045d2 <_vfiprintf_r+0x13a>
 80045a8:	eba0 0308 	sub.w	r3, r0, r8
 80045ac:	fa09 f303 	lsl.w	r3, r9, r3
 80045b0:	4313      	orrs	r3, r2
 80045b2:	9304      	str	r3, [sp, #16]
 80045b4:	46a2      	mov	sl, r4
 80045b6:	e7d2      	b.n	800455e <_vfiprintf_r+0xc6>
 80045b8:	9b03      	ldr	r3, [sp, #12]
 80045ba:	1d19      	adds	r1, r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	9103      	str	r1, [sp, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bfbb      	ittet	lt
 80045c4:	425b      	neglt	r3, r3
 80045c6:	f042 0202 	orrlt.w	r2, r2, #2
 80045ca:	9307      	strge	r3, [sp, #28]
 80045cc:	9307      	strlt	r3, [sp, #28]
 80045ce:	bfb8      	it	lt
 80045d0:	9204      	strlt	r2, [sp, #16]
 80045d2:	7823      	ldrb	r3, [r4, #0]
 80045d4:	2b2e      	cmp	r3, #46	; 0x2e
 80045d6:	d10c      	bne.n	80045f2 <_vfiprintf_r+0x15a>
 80045d8:	7863      	ldrb	r3, [r4, #1]
 80045da:	2b2a      	cmp	r3, #42	; 0x2a
 80045dc:	d134      	bne.n	8004648 <_vfiprintf_r+0x1b0>
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	9203      	str	r2, [sp, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfb8      	it	lt
 80045ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80045ee:	3402      	adds	r4, #2
 80045f0:	9305      	str	r3, [sp, #20]
 80045f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80046c8 <_vfiprintf_r+0x230>
 80045f6:	7821      	ldrb	r1, [r4, #0]
 80045f8:	2203      	movs	r2, #3
 80045fa:	4650      	mov	r0, sl
 80045fc:	f7fb fde8 	bl	80001d0 <memchr>
 8004600:	b138      	cbz	r0, 8004612 <_vfiprintf_r+0x17a>
 8004602:	9b04      	ldr	r3, [sp, #16]
 8004604:	eba0 000a 	sub.w	r0, r0, sl
 8004608:	2240      	movs	r2, #64	; 0x40
 800460a:	4082      	lsls	r2, r0
 800460c:	4313      	orrs	r3, r2
 800460e:	3401      	adds	r4, #1
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004616:	4829      	ldr	r0, [pc, #164]	; (80046bc <_vfiprintf_r+0x224>)
 8004618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800461c:	2206      	movs	r2, #6
 800461e:	f7fb fdd7 	bl	80001d0 <memchr>
 8004622:	2800      	cmp	r0, #0
 8004624:	d03f      	beq.n	80046a6 <_vfiprintf_r+0x20e>
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <_vfiprintf_r+0x228>)
 8004628:	bb1b      	cbnz	r3, 8004672 <_vfiprintf_r+0x1da>
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	3307      	adds	r3, #7
 800462e:	f023 0307 	bic.w	r3, r3, #7
 8004632:	3308      	adds	r3, #8
 8004634:	9303      	str	r3, [sp, #12]
 8004636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004638:	443b      	add	r3, r7
 800463a:	9309      	str	r3, [sp, #36]	; 0x24
 800463c:	e768      	b.n	8004510 <_vfiprintf_r+0x78>
 800463e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004642:	460c      	mov	r4, r1
 8004644:	2001      	movs	r0, #1
 8004646:	e7a6      	b.n	8004596 <_vfiprintf_r+0xfe>
 8004648:	2300      	movs	r3, #0
 800464a:	3401      	adds	r4, #1
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	4619      	mov	r1, r3
 8004650:	f04f 0c0a 	mov.w	ip, #10
 8004654:	4620      	mov	r0, r4
 8004656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465a:	3a30      	subs	r2, #48	; 0x30
 800465c:	2a09      	cmp	r2, #9
 800465e:	d903      	bls.n	8004668 <_vfiprintf_r+0x1d0>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0c6      	beq.n	80045f2 <_vfiprintf_r+0x15a>
 8004664:	9105      	str	r1, [sp, #20]
 8004666:	e7c4      	b.n	80045f2 <_vfiprintf_r+0x15a>
 8004668:	fb0c 2101 	mla	r1, ip, r1, r2
 800466c:	4604      	mov	r4, r0
 800466e:	2301      	movs	r3, #1
 8004670:	e7f0      	b.n	8004654 <_vfiprintf_r+0x1bc>
 8004672:	ab03      	add	r3, sp, #12
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	462a      	mov	r2, r5
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <_vfiprintf_r+0x22c>)
 800467a:	a904      	add	r1, sp, #16
 800467c:	4630      	mov	r0, r6
 800467e:	f3af 8000 	nop.w
 8004682:	4607      	mov	r7, r0
 8004684:	1c78      	adds	r0, r7, #1
 8004686:	d1d6      	bne.n	8004636 <_vfiprintf_r+0x19e>
 8004688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800468a:	07d9      	lsls	r1, r3, #31
 800468c:	d405      	bmi.n	800469a <_vfiprintf_r+0x202>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	059a      	lsls	r2, r3, #22
 8004692:	d402      	bmi.n	800469a <_vfiprintf_r+0x202>
 8004694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004696:	f7ff fdd3 	bl	8004240 <__retarget_lock_release_recursive>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	065b      	lsls	r3, r3, #25
 800469e:	f53f af1d 	bmi.w	80044dc <_vfiprintf_r+0x44>
 80046a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046a4:	e71c      	b.n	80044e0 <_vfiprintf_r+0x48>
 80046a6:	ab03      	add	r3, sp, #12
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	462a      	mov	r2, r5
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <_vfiprintf_r+0x22c>)
 80046ae:	a904      	add	r1, sp, #16
 80046b0:	4630      	mov	r0, r6
 80046b2:	f000 f879 	bl	80047a8 <_printf_i>
 80046b6:	e7e4      	b.n	8004682 <_vfiprintf_r+0x1ea>
 80046b8:	08004f38 	.word	0x08004f38
 80046bc:	08004f42 	.word	0x08004f42
 80046c0:	00000000 	.word	0x00000000
 80046c4:	08004473 	.word	0x08004473
 80046c8:	08004f3e 	.word	0x08004f3e

080046cc <_printf_common>:
 80046cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046d0:	4616      	mov	r6, r2
 80046d2:	4699      	mov	r9, r3
 80046d4:	688a      	ldr	r2, [r1, #8]
 80046d6:	690b      	ldr	r3, [r1, #16]
 80046d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046dc:	4293      	cmp	r3, r2
 80046de:	bfb8      	it	lt
 80046e0:	4613      	movlt	r3, r2
 80046e2:	6033      	str	r3, [r6, #0]
 80046e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046e8:	4607      	mov	r7, r0
 80046ea:	460c      	mov	r4, r1
 80046ec:	b10a      	cbz	r2, 80046f2 <_printf_common+0x26>
 80046ee:	3301      	adds	r3, #1
 80046f0:	6033      	str	r3, [r6, #0]
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	0699      	lsls	r1, r3, #26
 80046f6:	bf42      	ittt	mi
 80046f8:	6833      	ldrmi	r3, [r6, #0]
 80046fa:	3302      	addmi	r3, #2
 80046fc:	6033      	strmi	r3, [r6, #0]
 80046fe:	6825      	ldr	r5, [r4, #0]
 8004700:	f015 0506 	ands.w	r5, r5, #6
 8004704:	d106      	bne.n	8004714 <_printf_common+0x48>
 8004706:	f104 0a19 	add.w	sl, r4, #25
 800470a:	68e3      	ldr	r3, [r4, #12]
 800470c:	6832      	ldr	r2, [r6, #0]
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	42ab      	cmp	r3, r5
 8004712:	dc26      	bgt.n	8004762 <_printf_common+0x96>
 8004714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004718:	1e13      	subs	r3, r2, #0
 800471a:	6822      	ldr	r2, [r4, #0]
 800471c:	bf18      	it	ne
 800471e:	2301      	movne	r3, #1
 8004720:	0692      	lsls	r2, r2, #26
 8004722:	d42b      	bmi.n	800477c <_printf_common+0xb0>
 8004724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004728:	4649      	mov	r1, r9
 800472a:	4638      	mov	r0, r7
 800472c:	47c0      	blx	r8
 800472e:	3001      	adds	r0, #1
 8004730:	d01e      	beq.n	8004770 <_printf_common+0xa4>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	6922      	ldr	r2, [r4, #16]
 8004736:	f003 0306 	and.w	r3, r3, #6
 800473a:	2b04      	cmp	r3, #4
 800473c:	bf02      	ittt	eq
 800473e:	68e5      	ldreq	r5, [r4, #12]
 8004740:	6833      	ldreq	r3, [r6, #0]
 8004742:	1aed      	subeq	r5, r5, r3
 8004744:	68a3      	ldr	r3, [r4, #8]
 8004746:	bf0c      	ite	eq
 8004748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800474c:	2500      	movne	r5, #0
 800474e:	4293      	cmp	r3, r2
 8004750:	bfc4      	itt	gt
 8004752:	1a9b      	subgt	r3, r3, r2
 8004754:	18ed      	addgt	r5, r5, r3
 8004756:	2600      	movs	r6, #0
 8004758:	341a      	adds	r4, #26
 800475a:	42b5      	cmp	r5, r6
 800475c:	d11a      	bne.n	8004794 <_printf_common+0xc8>
 800475e:	2000      	movs	r0, #0
 8004760:	e008      	b.n	8004774 <_printf_common+0xa8>
 8004762:	2301      	movs	r3, #1
 8004764:	4652      	mov	r2, sl
 8004766:	4649      	mov	r1, r9
 8004768:	4638      	mov	r0, r7
 800476a:	47c0      	blx	r8
 800476c:	3001      	adds	r0, #1
 800476e:	d103      	bne.n	8004778 <_printf_common+0xac>
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004778:	3501      	adds	r5, #1
 800477a:	e7c6      	b.n	800470a <_printf_common+0x3e>
 800477c:	18e1      	adds	r1, r4, r3
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	2030      	movs	r0, #48	; 0x30
 8004782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004786:	4422      	add	r2, r4
 8004788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800478c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004790:	3302      	adds	r3, #2
 8004792:	e7c7      	b.n	8004724 <_printf_common+0x58>
 8004794:	2301      	movs	r3, #1
 8004796:	4622      	mov	r2, r4
 8004798:	4649      	mov	r1, r9
 800479a:	4638      	mov	r0, r7
 800479c:	47c0      	blx	r8
 800479e:	3001      	adds	r0, #1
 80047a0:	d0e6      	beq.n	8004770 <_printf_common+0xa4>
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7d9      	b.n	800475a <_printf_common+0x8e>
	...

080047a8 <_printf_i>:
 80047a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	7e0f      	ldrb	r7, [r1, #24]
 80047ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047b0:	2f78      	cmp	r7, #120	; 0x78
 80047b2:	4691      	mov	r9, r2
 80047b4:	4680      	mov	r8, r0
 80047b6:	460c      	mov	r4, r1
 80047b8:	469a      	mov	sl, r3
 80047ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047be:	d807      	bhi.n	80047d0 <_printf_i+0x28>
 80047c0:	2f62      	cmp	r7, #98	; 0x62
 80047c2:	d80a      	bhi.n	80047da <_printf_i+0x32>
 80047c4:	2f00      	cmp	r7, #0
 80047c6:	f000 80d4 	beq.w	8004972 <_printf_i+0x1ca>
 80047ca:	2f58      	cmp	r7, #88	; 0x58
 80047cc:	f000 80c0 	beq.w	8004950 <_printf_i+0x1a8>
 80047d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047d8:	e03a      	b.n	8004850 <_printf_i+0xa8>
 80047da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047de:	2b15      	cmp	r3, #21
 80047e0:	d8f6      	bhi.n	80047d0 <_printf_i+0x28>
 80047e2:	a101      	add	r1, pc, #4	; (adr r1, 80047e8 <_printf_i+0x40>)
 80047e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80047e8:	08004841 	.word	0x08004841
 80047ec:	08004855 	.word	0x08004855
 80047f0:	080047d1 	.word	0x080047d1
 80047f4:	080047d1 	.word	0x080047d1
 80047f8:	080047d1 	.word	0x080047d1
 80047fc:	080047d1 	.word	0x080047d1
 8004800:	08004855 	.word	0x08004855
 8004804:	080047d1 	.word	0x080047d1
 8004808:	080047d1 	.word	0x080047d1
 800480c:	080047d1 	.word	0x080047d1
 8004810:	080047d1 	.word	0x080047d1
 8004814:	08004959 	.word	0x08004959
 8004818:	08004881 	.word	0x08004881
 800481c:	08004913 	.word	0x08004913
 8004820:	080047d1 	.word	0x080047d1
 8004824:	080047d1 	.word	0x080047d1
 8004828:	0800497b 	.word	0x0800497b
 800482c:	080047d1 	.word	0x080047d1
 8004830:	08004881 	.word	0x08004881
 8004834:	080047d1 	.word	0x080047d1
 8004838:	080047d1 	.word	0x080047d1
 800483c:	0800491b 	.word	0x0800491b
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	1d1a      	adds	r2, r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	602a      	str	r2, [r5, #0]
 8004848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800484c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004850:	2301      	movs	r3, #1
 8004852:	e09f      	b.n	8004994 <_printf_i+0x1ec>
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	682b      	ldr	r3, [r5, #0]
 8004858:	0607      	lsls	r7, r0, #24
 800485a:	f103 0104 	add.w	r1, r3, #4
 800485e:	6029      	str	r1, [r5, #0]
 8004860:	d501      	bpl.n	8004866 <_printf_i+0xbe>
 8004862:	681e      	ldr	r6, [r3, #0]
 8004864:	e003      	b.n	800486e <_printf_i+0xc6>
 8004866:	0646      	lsls	r6, r0, #25
 8004868:	d5fb      	bpl.n	8004862 <_printf_i+0xba>
 800486a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800486e:	2e00      	cmp	r6, #0
 8004870:	da03      	bge.n	800487a <_printf_i+0xd2>
 8004872:	232d      	movs	r3, #45	; 0x2d
 8004874:	4276      	negs	r6, r6
 8004876:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800487a:	485a      	ldr	r0, [pc, #360]	; (80049e4 <_printf_i+0x23c>)
 800487c:	230a      	movs	r3, #10
 800487e:	e012      	b.n	80048a6 <_printf_i+0xfe>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	1d19      	adds	r1, r3, #4
 8004886:	6029      	str	r1, [r5, #0]
 8004888:	0605      	lsls	r5, r0, #24
 800488a:	d501      	bpl.n	8004890 <_printf_i+0xe8>
 800488c:	681e      	ldr	r6, [r3, #0]
 800488e:	e002      	b.n	8004896 <_printf_i+0xee>
 8004890:	0641      	lsls	r1, r0, #25
 8004892:	d5fb      	bpl.n	800488c <_printf_i+0xe4>
 8004894:	881e      	ldrh	r6, [r3, #0]
 8004896:	4853      	ldr	r0, [pc, #332]	; (80049e4 <_printf_i+0x23c>)
 8004898:	2f6f      	cmp	r7, #111	; 0x6f
 800489a:	bf0c      	ite	eq
 800489c:	2308      	moveq	r3, #8
 800489e:	230a      	movne	r3, #10
 80048a0:	2100      	movs	r1, #0
 80048a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048a6:	6865      	ldr	r5, [r4, #4]
 80048a8:	60a5      	str	r5, [r4, #8]
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	bfa2      	ittt	ge
 80048ae:	6821      	ldrge	r1, [r4, #0]
 80048b0:	f021 0104 	bicge.w	r1, r1, #4
 80048b4:	6021      	strge	r1, [r4, #0]
 80048b6:	b90e      	cbnz	r6, 80048bc <_printf_i+0x114>
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	d04b      	beq.n	8004954 <_printf_i+0x1ac>
 80048bc:	4615      	mov	r5, r2
 80048be:	fbb6 f1f3 	udiv	r1, r6, r3
 80048c2:	fb03 6711 	mls	r7, r3, r1, r6
 80048c6:	5dc7      	ldrb	r7, [r0, r7]
 80048c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80048cc:	4637      	mov	r7, r6
 80048ce:	42bb      	cmp	r3, r7
 80048d0:	460e      	mov	r6, r1
 80048d2:	d9f4      	bls.n	80048be <_printf_i+0x116>
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d10b      	bne.n	80048f0 <_printf_i+0x148>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	07de      	lsls	r6, r3, #31
 80048dc:	d508      	bpl.n	80048f0 <_printf_i+0x148>
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	6861      	ldr	r1, [r4, #4]
 80048e2:	4299      	cmp	r1, r3
 80048e4:	bfde      	ittt	le
 80048e6:	2330      	movle	r3, #48	; 0x30
 80048e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80048ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80048f0:	1b52      	subs	r2, r2, r5
 80048f2:	6122      	str	r2, [r4, #16]
 80048f4:	f8cd a000 	str.w	sl, [sp]
 80048f8:	464b      	mov	r3, r9
 80048fa:	aa03      	add	r2, sp, #12
 80048fc:	4621      	mov	r1, r4
 80048fe:	4640      	mov	r0, r8
 8004900:	f7ff fee4 	bl	80046cc <_printf_common>
 8004904:	3001      	adds	r0, #1
 8004906:	d14a      	bne.n	800499e <_printf_i+0x1f6>
 8004908:	f04f 30ff 	mov.w	r0, #4294967295
 800490c:	b004      	add	sp, #16
 800490e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	f043 0320 	orr.w	r3, r3, #32
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	4833      	ldr	r0, [pc, #204]	; (80049e8 <_printf_i+0x240>)
 800491c:	2778      	movs	r7, #120	; 0x78
 800491e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	6829      	ldr	r1, [r5, #0]
 8004926:	061f      	lsls	r7, r3, #24
 8004928:	f851 6b04 	ldr.w	r6, [r1], #4
 800492c:	d402      	bmi.n	8004934 <_printf_i+0x18c>
 800492e:	065f      	lsls	r7, r3, #25
 8004930:	bf48      	it	mi
 8004932:	b2b6      	uxthmi	r6, r6
 8004934:	07df      	lsls	r7, r3, #31
 8004936:	bf48      	it	mi
 8004938:	f043 0320 	orrmi.w	r3, r3, #32
 800493c:	6029      	str	r1, [r5, #0]
 800493e:	bf48      	it	mi
 8004940:	6023      	strmi	r3, [r4, #0]
 8004942:	b91e      	cbnz	r6, 800494c <_printf_i+0x1a4>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	f023 0320 	bic.w	r3, r3, #32
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	2310      	movs	r3, #16
 800494e:	e7a7      	b.n	80048a0 <_printf_i+0xf8>
 8004950:	4824      	ldr	r0, [pc, #144]	; (80049e4 <_printf_i+0x23c>)
 8004952:	e7e4      	b.n	800491e <_printf_i+0x176>
 8004954:	4615      	mov	r5, r2
 8004956:	e7bd      	b.n	80048d4 <_printf_i+0x12c>
 8004958:	682b      	ldr	r3, [r5, #0]
 800495a:	6826      	ldr	r6, [r4, #0]
 800495c:	6961      	ldr	r1, [r4, #20]
 800495e:	1d18      	adds	r0, r3, #4
 8004960:	6028      	str	r0, [r5, #0]
 8004962:	0635      	lsls	r5, r6, #24
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	d501      	bpl.n	800496c <_printf_i+0x1c4>
 8004968:	6019      	str	r1, [r3, #0]
 800496a:	e002      	b.n	8004972 <_printf_i+0x1ca>
 800496c:	0670      	lsls	r0, r6, #25
 800496e:	d5fb      	bpl.n	8004968 <_printf_i+0x1c0>
 8004970:	8019      	strh	r1, [r3, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	6123      	str	r3, [r4, #16]
 8004976:	4615      	mov	r5, r2
 8004978:	e7bc      	b.n	80048f4 <_printf_i+0x14c>
 800497a:	682b      	ldr	r3, [r5, #0]
 800497c:	1d1a      	adds	r2, r3, #4
 800497e:	602a      	str	r2, [r5, #0]
 8004980:	681d      	ldr	r5, [r3, #0]
 8004982:	6862      	ldr	r2, [r4, #4]
 8004984:	2100      	movs	r1, #0
 8004986:	4628      	mov	r0, r5
 8004988:	f7fb fc22 	bl	80001d0 <memchr>
 800498c:	b108      	cbz	r0, 8004992 <_printf_i+0x1ea>
 800498e:	1b40      	subs	r0, r0, r5
 8004990:	6060      	str	r0, [r4, #4]
 8004992:	6863      	ldr	r3, [r4, #4]
 8004994:	6123      	str	r3, [r4, #16]
 8004996:	2300      	movs	r3, #0
 8004998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800499c:	e7aa      	b.n	80048f4 <_printf_i+0x14c>
 800499e:	6923      	ldr	r3, [r4, #16]
 80049a0:	462a      	mov	r2, r5
 80049a2:	4649      	mov	r1, r9
 80049a4:	4640      	mov	r0, r8
 80049a6:	47d0      	blx	sl
 80049a8:	3001      	adds	r0, #1
 80049aa:	d0ad      	beq.n	8004908 <_printf_i+0x160>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	079b      	lsls	r3, r3, #30
 80049b0:	d413      	bmi.n	80049da <_printf_i+0x232>
 80049b2:	68e0      	ldr	r0, [r4, #12]
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	4298      	cmp	r0, r3
 80049b8:	bfb8      	it	lt
 80049ba:	4618      	movlt	r0, r3
 80049bc:	e7a6      	b.n	800490c <_printf_i+0x164>
 80049be:	2301      	movs	r3, #1
 80049c0:	4632      	mov	r2, r6
 80049c2:	4649      	mov	r1, r9
 80049c4:	4640      	mov	r0, r8
 80049c6:	47d0      	blx	sl
 80049c8:	3001      	adds	r0, #1
 80049ca:	d09d      	beq.n	8004908 <_printf_i+0x160>
 80049cc:	3501      	adds	r5, #1
 80049ce:	68e3      	ldr	r3, [r4, #12]
 80049d0:	9903      	ldr	r1, [sp, #12]
 80049d2:	1a5b      	subs	r3, r3, r1
 80049d4:	42ab      	cmp	r3, r5
 80049d6:	dcf2      	bgt.n	80049be <_printf_i+0x216>
 80049d8:	e7eb      	b.n	80049b2 <_printf_i+0x20a>
 80049da:	2500      	movs	r5, #0
 80049dc:	f104 0619 	add.w	r6, r4, #25
 80049e0:	e7f5      	b.n	80049ce <_printf_i+0x226>
 80049e2:	bf00      	nop
 80049e4:	08004f49 	.word	0x08004f49
 80049e8:	08004f5a 	.word	0x08004f5a

080049ec <__sflush_r>:
 80049ec:	898a      	ldrh	r2, [r1, #12]
 80049ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	0710      	lsls	r0, r2, #28
 80049f6:	460c      	mov	r4, r1
 80049f8:	d458      	bmi.n	8004aac <__sflush_r+0xc0>
 80049fa:	684b      	ldr	r3, [r1, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	dc05      	bgt.n	8004a0c <__sflush_r+0x20>
 8004a00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	dc02      	bgt.n	8004a0c <__sflush_r+0x20>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	d0f9      	beq.n	8004a06 <__sflush_r+0x1a>
 8004a12:	2300      	movs	r3, #0
 8004a14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a18:	682f      	ldr	r7, [r5, #0]
 8004a1a:	6a21      	ldr	r1, [r4, #32]
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	d032      	beq.n	8004a86 <__sflush_r+0x9a>
 8004a20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	075a      	lsls	r2, r3, #29
 8004a26:	d505      	bpl.n	8004a34 <__sflush_r+0x48>
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	1ac0      	subs	r0, r0, r3
 8004a2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a2e:	b10b      	cbz	r3, 8004a34 <__sflush_r+0x48>
 8004a30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a32:	1ac0      	subs	r0, r0, r3
 8004a34:	2300      	movs	r3, #0
 8004a36:	4602      	mov	r2, r0
 8004a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a3a:	6a21      	ldr	r1, [r4, #32]
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b0      	blx	r6
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	d106      	bne.n	8004a54 <__sflush_r+0x68>
 8004a46:	6829      	ldr	r1, [r5, #0]
 8004a48:	291d      	cmp	r1, #29
 8004a4a:	d82b      	bhi.n	8004aa4 <__sflush_r+0xb8>
 8004a4c:	4a29      	ldr	r2, [pc, #164]	; (8004af4 <__sflush_r+0x108>)
 8004a4e:	410a      	asrs	r2, r1
 8004a50:	07d6      	lsls	r6, r2, #31
 8004a52:	d427      	bmi.n	8004aa4 <__sflush_r+0xb8>
 8004a54:	2200      	movs	r2, #0
 8004a56:	6062      	str	r2, [r4, #4]
 8004a58:	04d9      	lsls	r1, r3, #19
 8004a5a:	6922      	ldr	r2, [r4, #16]
 8004a5c:	6022      	str	r2, [r4, #0]
 8004a5e:	d504      	bpl.n	8004a6a <__sflush_r+0x7e>
 8004a60:	1c42      	adds	r2, r0, #1
 8004a62:	d101      	bne.n	8004a68 <__sflush_r+0x7c>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	b903      	cbnz	r3, 8004a6a <__sflush_r+0x7e>
 8004a68:	6560      	str	r0, [r4, #84]	; 0x54
 8004a6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a6c:	602f      	str	r7, [r5, #0]
 8004a6e:	2900      	cmp	r1, #0
 8004a70:	d0c9      	beq.n	8004a06 <__sflush_r+0x1a>
 8004a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a76:	4299      	cmp	r1, r3
 8004a78:	d002      	beq.n	8004a80 <__sflush_r+0x94>
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f7ff fbe2 	bl	8004244 <_free_r>
 8004a80:	2000      	movs	r0, #0
 8004a82:	6360      	str	r0, [r4, #52]	; 0x34
 8004a84:	e7c0      	b.n	8004a08 <__sflush_r+0x1c>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4628      	mov	r0, r5
 8004a8a:	47b0      	blx	r6
 8004a8c:	1c41      	adds	r1, r0, #1
 8004a8e:	d1c8      	bne.n	8004a22 <__sflush_r+0x36>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0c5      	beq.n	8004a22 <__sflush_r+0x36>
 8004a96:	2b1d      	cmp	r3, #29
 8004a98:	d001      	beq.n	8004a9e <__sflush_r+0xb2>
 8004a9a:	2b16      	cmp	r3, #22
 8004a9c:	d101      	bne.n	8004aa2 <__sflush_r+0xb6>
 8004a9e:	602f      	str	r7, [r5, #0]
 8004aa0:	e7b1      	b.n	8004a06 <__sflush_r+0x1a>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aa8:	81a3      	strh	r3, [r4, #12]
 8004aaa:	e7ad      	b.n	8004a08 <__sflush_r+0x1c>
 8004aac:	690f      	ldr	r7, [r1, #16]
 8004aae:	2f00      	cmp	r7, #0
 8004ab0:	d0a9      	beq.n	8004a06 <__sflush_r+0x1a>
 8004ab2:	0793      	lsls	r3, r2, #30
 8004ab4:	680e      	ldr	r6, [r1, #0]
 8004ab6:	bf08      	it	eq
 8004ab8:	694b      	ldreq	r3, [r1, #20]
 8004aba:	600f      	str	r7, [r1, #0]
 8004abc:	bf18      	it	ne
 8004abe:	2300      	movne	r3, #0
 8004ac0:	eba6 0807 	sub.w	r8, r6, r7
 8004ac4:	608b      	str	r3, [r1, #8]
 8004ac6:	f1b8 0f00 	cmp.w	r8, #0
 8004aca:	dd9c      	ble.n	8004a06 <__sflush_r+0x1a>
 8004acc:	6a21      	ldr	r1, [r4, #32]
 8004ace:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ad0:	4643      	mov	r3, r8
 8004ad2:	463a      	mov	r2, r7
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	47b0      	blx	r6
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	dc06      	bgt.n	8004aea <__sflush_r+0xfe>
 8004adc:	89a3      	ldrh	r3, [r4, #12]
 8004ade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae2:	81a3      	strh	r3, [r4, #12]
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	e78e      	b.n	8004a08 <__sflush_r+0x1c>
 8004aea:	4407      	add	r7, r0
 8004aec:	eba8 0800 	sub.w	r8, r8, r0
 8004af0:	e7e9      	b.n	8004ac6 <__sflush_r+0xda>
 8004af2:	bf00      	nop
 8004af4:	dfbffffe 	.word	0xdfbffffe

08004af8 <_fflush_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	4605      	mov	r5, r0
 8004afe:	460c      	mov	r4, r1
 8004b00:	b913      	cbnz	r3, 8004b08 <_fflush_r+0x10>
 8004b02:	2500      	movs	r5, #0
 8004b04:	4628      	mov	r0, r5
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	b118      	cbz	r0, 8004b12 <_fflush_r+0x1a>
 8004b0a:	6a03      	ldr	r3, [r0, #32]
 8004b0c:	b90b      	cbnz	r3, 8004b12 <_fflush_r+0x1a>
 8004b0e:	f7ff f8eb 	bl	8003ce8 <__sinit>
 8004b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f3      	beq.n	8004b02 <_fflush_r+0xa>
 8004b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b1c:	07d0      	lsls	r0, r2, #31
 8004b1e:	d404      	bmi.n	8004b2a <_fflush_r+0x32>
 8004b20:	0599      	lsls	r1, r3, #22
 8004b22:	d402      	bmi.n	8004b2a <_fflush_r+0x32>
 8004b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b26:	f7ff fb8a 	bl	800423e <__retarget_lock_acquire_recursive>
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	f7ff ff5d 	bl	80049ec <__sflush_r>
 8004b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b34:	07da      	lsls	r2, r3, #31
 8004b36:	4605      	mov	r5, r0
 8004b38:	d4e4      	bmi.n	8004b04 <_fflush_r+0xc>
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	059b      	lsls	r3, r3, #22
 8004b3e:	d4e1      	bmi.n	8004b04 <_fflush_r+0xc>
 8004b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b42:	f7ff fb7d 	bl	8004240 <__retarget_lock_release_recursive>
 8004b46:	e7dd      	b.n	8004b04 <_fflush_r+0xc>

08004b48 <__swhatbuf_r>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	2900      	cmp	r1, #0
 8004b52:	b096      	sub	sp, #88	; 0x58
 8004b54:	4615      	mov	r5, r2
 8004b56:	461e      	mov	r6, r3
 8004b58:	da0d      	bge.n	8004b76 <__swhatbuf_r+0x2e>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	bf0c      	ite	eq
 8004b66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004b6a:	2340      	movne	r3, #64	; 0x40
 8004b6c:	2000      	movs	r0, #0
 8004b6e:	6031      	str	r1, [r6, #0]
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	b016      	add	sp, #88	; 0x58
 8004b74:	bd70      	pop	{r4, r5, r6, pc}
 8004b76:	466a      	mov	r2, sp
 8004b78:	f000 f848 	bl	8004c0c <_fstat_r>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	dbec      	blt.n	8004b5a <__swhatbuf_r+0x12>
 8004b80:	9901      	ldr	r1, [sp, #4]
 8004b82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004b86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004b8a:	4259      	negs	r1, r3
 8004b8c:	4159      	adcs	r1, r3
 8004b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b92:	e7eb      	b.n	8004b6c <__swhatbuf_r+0x24>

08004b94 <__smakebuf_r>:
 8004b94:	898b      	ldrh	r3, [r1, #12]
 8004b96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b98:	079d      	lsls	r5, r3, #30
 8004b9a:	4606      	mov	r6, r0
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	d507      	bpl.n	8004bb0 <__smakebuf_r+0x1c>
 8004ba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	6123      	str	r3, [r4, #16]
 8004ba8:	2301      	movs	r3, #1
 8004baa:	6163      	str	r3, [r4, #20]
 8004bac:	b002      	add	sp, #8
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	ab01      	add	r3, sp, #4
 8004bb2:	466a      	mov	r2, sp
 8004bb4:	f7ff ffc8 	bl	8004b48 <__swhatbuf_r>
 8004bb8:	9900      	ldr	r1, [sp, #0]
 8004bba:	4605      	mov	r5, r0
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f7ff fbb5 	bl	800432c <_malloc_r>
 8004bc2:	b948      	cbnz	r0, 8004bd8 <__smakebuf_r+0x44>
 8004bc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc8:	059a      	lsls	r2, r3, #22
 8004bca:	d4ef      	bmi.n	8004bac <__smakebuf_r+0x18>
 8004bcc:	f023 0303 	bic.w	r3, r3, #3
 8004bd0:	f043 0302 	orr.w	r3, r3, #2
 8004bd4:	81a3      	strh	r3, [r4, #12]
 8004bd6:	e7e3      	b.n	8004ba0 <__smakebuf_r+0xc>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	6020      	str	r0, [r4, #0]
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	9b00      	ldr	r3, [sp, #0]
 8004be4:	6163      	str	r3, [r4, #20]
 8004be6:	9b01      	ldr	r3, [sp, #4]
 8004be8:	6120      	str	r0, [r4, #16]
 8004bea:	b15b      	cbz	r3, 8004c04 <__smakebuf_r+0x70>
 8004bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f81d 	bl	8004c30 <_isatty_r>
 8004bf6:	b128      	cbz	r0, 8004c04 <__smakebuf_r+0x70>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	431d      	orrs	r5, r3
 8004c08:	81a5      	strh	r5, [r4, #12]
 8004c0a:	e7cf      	b.n	8004bac <__smakebuf_r+0x18>

08004c0c <_fstat_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d07      	ldr	r5, [pc, #28]	; (8004c2c <_fstat_r+0x20>)
 8004c10:	2300      	movs	r3, #0
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	f7fc f806 	bl	8000c2a <_fstat>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	d102      	bne.n	8004c28 <_fstat_r+0x1c>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	b103      	cbz	r3, 8004c28 <_fstat_r+0x1c>
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200002dc 	.word	0x200002dc

08004c30 <_isatty_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d06      	ldr	r5, [pc, #24]	; (8004c4c <_isatty_r+0x1c>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fc f805 	bl	8000c4a <_isatty>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_isatty_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_isatty_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	200002dc 	.word	0x200002dc

08004c50 <_sbrk_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d06      	ldr	r5, [pc, #24]	; (8004c6c <_sbrk_r+0x1c>)
 8004c54:	2300      	movs	r3, #0
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	f7fc f80e 	bl	8000c7c <_sbrk>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_sbrk_r+0x1a>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_sbrk_r+0x1a>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	200002dc 	.word	0x200002dc

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
